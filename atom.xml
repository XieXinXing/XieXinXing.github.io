<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢欣欣已经长大</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-12-29T16:37:19.419Z</updated>
  <id>/</id>
  
  <author>
    <name>长大的谢星星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缘何而来</title>
    <link href="/2020/12/20/%E7%BC%98%E4%BD%95%E8%80%8C%E6%9D%A5/"/>
    <id>/2020/12/20/缘何而来/</id>
    <published>2020-12-20T01:36:15.000Z</published>
    <updated>2020-12-29T16:37:19.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘何而来"><a href="#缘何而来" class="headerlink" title="缘何而来"></a>缘何而来</h1><ul><li>为何建站</li><li>为何记录</li><li>为何怀念</li></ul><a id="more"></a><p>我要怀念谢欣欣。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘何而来&quot;&gt;&lt;a href=&quot;#缘何而来&quot; class=&quot;headerlink&quot; title=&quot;缘何而来&quot;&gt;&lt;/a&gt;缘何而来&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;为何建站&lt;/li&gt;
&lt;li&gt;为何记录&lt;/li&gt;
&lt;li&gt;为何怀念&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="生活" scheme="/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>自动部署 Hexo 静态博客</title>
    <link href="/2020/12/20/CI%20%E9%83%A8%E7%BD%B2%20Hexo%20%E5%8D%9A%E5%AE%A2/"/>
    <id>/2020/12/20/CI 部署 Hexo 博客/</id>
    <published>2020-12-20T01:17:32.000Z</published>
    <updated>2020-12-29T16:37:19.419Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/zm219o.png" alt="zm219o"></p><blockquote><p>原本根据 <a href="https://www.jianshu.com/p/60de63b14ae5?from=jiantop.com" target="_blank" rel="noopener">Hexo的版本控制与持续集成</a>，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 <a href="https://hexo.io/zh-cn/docs/github-pages#" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a>，成功利用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 <a href="https://github.com/actions" target="_blank" rel="noopener">Github Action</a> 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。</p></blockquote><a id="more"></a><h1 id="利用-Travis-CI-自动部署"><a href="#利用-Travis-CI-自动部署" class="headerlink" title="利用 Travis CI 自动部署"></a>利用 Travis CI 自动部署</h1><blockquote><p>这种方法与前面直接进行部署的方法不同，是从使用 <code></code>hexo cl &amp; hexo g &amp; hexo d` 的前一步开始的。</p></blockquote><h2 id="新建-GitHub-仓库"><a href="#新建-GitHub-仓库" class="headerlink" title="新建 GitHub 仓库"></a>新建 GitHub 仓库</h2><p>创建一个用来存储 Hexo 项目源代码和静态页面的 <a href="https://github.com/new" target="_blank" rel="noopener">GitHub 仓库</a>，如果你希望你的站点能通过 <code>&lt;GitHub 用户名&gt;.github.io</code> 域名访问， repository 应该直接命名为 <code>&lt;GitHub 用户名&gt;.github.io</code>。</p><ul><li>用 <code>master 分支</code> 来存储 hexo 博客项目源代码。</li><li>用 <code>gh-pages 分支</code> 存储来编译生成后静态页面。</li></ul><p>当 <code>master 分支</code>的源代码（主题文件，文章 md 文件、图片等）有变动时，CI 会自动编译并部署到 <code>gh-pages 分支</code>。</p><blockquote><p>注：由于前面已经将<code>&lt;GitHub 用户名&gt;.github.io</code> 进行了博客部署，因此要么将仓库删除重建，要么新注册账号。建议直接删除重建，后者还涉及不同 Github 布置 SSH 问题。</p></blockquote><h2 id="Travis-CI-关联项目仓库"><a href="#Travis-CI-关联项目仓库" class="headerlink" title="Travis CI 关联项目仓库"></a>Travis CI 关联项目仓库</h2><p>在<code>用户头像处</code>点击 <code>Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</code> 创建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">github 访问令牌</a> ，名称随意，勾选 <code>repo</code> 选项，然后复制密匙：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229213904534.png" alt="image-20201229213904534"></p><p>使用 GitHub 账号登录 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI 官网</a>，关联你的 hexo 博客项目仓库。在所列出来的仓库里找到你的 <code>hexo 项目仓库</code>，点击 <code>Settings</code> 。增加环境变量，名称随意但是<code>后面需要使用</code>，我在这里设置为<code>GH_TOKEN</code> ，值粘贴入在前面生成的 <code>GitHub Token</code>，最后点击 “Add” 添加：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229222055509.png" alt="image-20201229222055509"> </p><h2 id="添加-travis-yml-文件"><a href="#添加-travis-yml-文件" class="headerlink" title="添加 .travis.yml 文件"></a>添加 .travis.yml 文件</h2><p>在你的 Hexo 博客项目根文件夹下添加 Travis CI 的配置文件 <code>.travis.yml</code>。</p><p><code>.travis.yml</code> 文件的内容如下：</p><pre><code>sudo: falselanguage: node_jsnode_js:  - 12cache: npmbranches:  only:    - master # build master branch onlyscript:  - hexo generatedeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN   #这里为环境变量名称  keep-history: true  on:    branch: master  local-dir: public</code></pre><h2 id="push源码"><a href="#push源码" class="headerlink" title="push源码"></a>push源码</h2><p><a herf="link1"> </a>将你的 hexo 项目代码 push 到 GitHub 仓库的 master 分支，Travis CI 检测到 master 分支代码有变动，会自动执行脚本命令，将 hexo 项目编译生成静态页面，部署到 <code>gh-pages</code> 分支。</p><p>部署方法，在 Hexo项目根目录右键 <code>Git Bash Here</code>：</p><pre><code class="git">1. git init  #首次Push2. git remote add origin https://github.com/Lykisun/xxx.git  #首次Push3. git add .     #首次Push，后面可将.改为发生变动的文件4. git commit -m &quot;init&quot;     #引号内为注释内容5. git push -u origin msater  </code></pre><blockquote><p>若命令2报错：<code>git remote add origin https://github.com/Lykisun/xxx.git</code></p><p>则先执行：<code>git remote rm origin</code></p><p>然后再执行：<code>git remote add origin https://github.com/Lykisun/xxx.git</code></p><p>其他报错自行搜索皆有解决方案。</p></blockquote><h2 id="设置-Github-Pages"><a href="#设置-Github-Pages" class="headerlink" title="设置 Github Pages"></a>设置 Github Pages</h2><p>在 GitHub 中前往<code>仓库</code>的 <code>setting-&gt;Options</code>，往下修改 <code>GitHub Pages</code> 的部署分支为 <code>gh-pages</code> 然后 Save，即可通过<code>&lt;你的 GitHub 用户名&gt;.github.io</code> 域名访问（这里我已经删除gh-pages分支因此没有显示）：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229223430565.png" alt="image-20201229223430565"></p><p>如果显示404只需要等待一段时间。</p><h1 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h1><p>参考了几篇文章，失败了好多次，终于成功使用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 将 Hexo 博客部署到 GitHub Pages 上。虽然成功了，但这意味着站点文件将会是公开的。虽然并没有什么重要文件，但是还是希望能够把源码放在私密仓库。一开始的时候我就觉得应该有两种<strong>思路</strong>： </p><ol><li>源码推送到<code>User.github.io</code>仓库，<code>hexo g</code>后推送到分支，将分支作为博客仓库；</li><li>源码推送到<code>private</code>仓库，<code>hexo cl</code> <code>hexo g</code> <code>hexo d</code> 实现推送到<code>User.github.io</code> 公开仓库。</li></ol><p>由于一开始我就已经建立了部署博客的<code>User.github.io</code> 公开仓库，因此在尝试第一种思路的时候我特意去新申请了一个 Github 账号，不同账号使用 SSH 也出现了让我头秃的问题。但是第二种思路并不需要我们改动已经建立好的博客。</p><p>第一种思路成功后我就开始尝试第二种。我在搜索后没有发现利用 Travis CI 使用私密仓库跨仓库部署推送的相关文章，好像之前 Travis CI 对于私密仓库是收费的，现在免费但也有次数限制。进行了好几次尝试之后，每次要么编译失败，要么就只是部署到原仓库的分支。于是放弃。</p><p>最后我搜索到 <a href="https://segmentfault.com/a/1190000021815477" target="_blank" rel="noopener">使用 GitHub Actions 自动部署博客教程</a> ，发现 Github 本身就有免费的 CI 功能，于是开始尝试利用 Github Action 开始了第二种思路。</p><h1 id="利用-Github-Action-自动部署"><a href="#利用-Github-Action-自动部署" class="headerlink" title="利用 Github Action 自动部署"></a>利用 Github Action 自动部署</h1><h2 id="配置-Github-Token"><a href="#配置-Github-Token" class="headerlink" title="配置 Github Token"></a>配置 Github Token</h2><p>在<code>用户头像处</code>点击 <code>Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</code> 创建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">github 访问令牌</a> ，名称随意，勾选 <code>repo</code> 选项，然后复制密匙：<br><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229213904534.png" alt="image-20201229213904534"></p><p>新建用来存放源码的<strong>私密仓库</strong>，名称无妨，在<strong>仓库</strong>的 <code>Setting-&gt;Secrets-&gt;New repositorysecret</code> 添加新Secret，名称随意但是<strong>后面需要使用</strong>，我这里设置为 <code>ACCESS_TOKEN</code>，内容粘贴入刚才复制的 <code>token</code> ：<br><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229214844338.png" alt="image-20201229214844338"></p><blockquote><p>不同文章设置不太一样，有的用生成的ssh设置的，有的还要设置博客仓库的Deploy keys的，不过我用那些方法都失败了，只用上述办法才成功。</p></blockquote><h2 id="Push源码"><a href="#Push源码" class="headerlink" title="Push源码"></a>Push源码</h2><p>同第一节</p><h2 id="配置-GitHub-Actions"><a href="#配置-GitHub-Actions" class="headerlink" title="配置 GitHub Actions"></a>配置 GitHub Actions</h2><p>在<strong>私密仓库</strong>的 <code>Action-&gt;New workflow</code> 添加新 Action 文件，这里有很多 Action 模板和别人造好的 Action，后续需要可以进行了解使用，这里我们直接选择 <code>set up a workflow yourself</code>，会在仓库新建 <code>.github/workflows/xxx.yml</code> ，然后填入以下内容：</p><pre><code class="yml"># workflow namename: CI Hexo Blog Deploy LTS# master branch on push, auto runon:   push:    branches:      - masterjobs:  Deploy-Pages:     name: Deploy Hexo Public To Pages    runs-on: ubuntu-latest     steps:    # check it to your workflow can access it    # from: https://github.com/actions/checkout    - name: Checkout Repository master branch      uses: actions/checkout@master     # from: https://github.com/actions/setup-node      - name: Setup Node.js 12.x       uses: actions/setup-node@master      with:        node-version: &quot;12.x&quot;    - name: Setup Git Infomation      run: |         git config --global user.name &#39;Github用户名&#39;           #修改处        git config --global user.email &#39;Github注册邮箱&#39;        #修改处    - name: Get Latest Commit Message       run: |        git log --pretty=format:&quot;%s from Github Actions at `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot; --date=short -n 1  &gt; commit-message.log    - name: Setup Hexo Dependencies      run: |        npm install hexo-cli -g        npm install    - name: Generate public files      run: |        hexo clean        hexo generate     - name: Deploy To Github Pages       env:        Github_Pages: github.com/Github用户名/Github用户名.github.io    #修改处        Github_Token: ${{ secrets.ACCESS_TOKEN }}                      #修改处      run: |          git clone https://${Github_Pages} .github_pages        cd .github_pages        git checkout master        cd ../        mv .github_pages/.git/ ./public/        cd ./public/        git add .        git commit -F ../commit-message.log        git push --force --quiet &quot;https://${Github_Token}@${Github_Pages}&quot; master:master</code></pre><blockquote><p>注：以上需要更改 <strong>Github用户名</strong>、<strong>Github注册邮箱</strong>，以及刚才你设置的 <strong>Secret 名称</strong>。</p><p>有的相关文章中直接使用了别人的 Action ，但是我使用后一直出现 <code>fatal: could not read Username for https://github.com: No such file or directory</code> 的错误，没有找到解决方法，就换了一种方式。</p></blockquote><p>完成后提交到仓库，就会开始自动构建并部署：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229220335065.png" alt="image-20201229220335065"></p><p>在我重新进行部署的时候，新建了 <code>Github用户名.github.io</code> 仓库，然后将源码推送到新建的<strong>私密仓库</strong>，再建立 Action 后，出现了以下错误：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229233904987.png" alt="image-20201229233904987"></p><p>这是由于<code>Github用户名.github.io</code> 仓库并没有 <strong>master</strong> 分支的缘故，因此可以 PUSH 一个README文件上去并将其设为 <strong>master</strong> 分支，或者直接建立的时候勾选 README 选项，当然也可以在仓库建立，我就是直接新建的，不过这样产生的分支名称是 <strong>main</strong> ，上述 <code>xxx.yml</code> Action文件就要调整 <code>master</code> 为 <code>main</code>：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229235139425.png" alt="image-20201229235139425"></p><p>然后就成功了：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229235239701.png" alt="image-20201229235239701"></p><p>之后就可以看到博客的更新了。今后可以在源码仓库直接修改文件或者本地修改后推送到源码仓库，就会自动构建然后推送到博客仓库，一来备份了源码，二来免去部署步骤。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="使用自定义域名访问"><a href="#使用自定义域名访问" class="headerlink" title="使用自定义域名访问"></a>使用自定义域名访问</h3><p>你可以使用自己的域名来访问 GitHub Pages 服务，只需在 hexo 项目的 <code>source</code> 目录下添加 <code>CNANE</code> 文件。</p><p><code>CNANE</code> 文件内容为自定义域名，例如：xxx.xxx.cn，然后在仓库 <code>Settings</code> 开启<strong>域名 https 协议</strong>。</p><h3 id="Project-page"><a href="#Project-page" class="headerlink" title="Project page"></a>Project page</h3><p>如果你更希望你的站点部署在 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 修改为 <code>&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尝试下来，当然是 Github Action 更加简单快捷，而且是免费的，功能更加丰富，因此建议使用 Github Action。当然还有其他的CI工具，我就没有试用了。</p><hr><p><em>参考链接</em></p><p><a href="https://keep.xpoet.cn/2020/11/%E4%BD%BF%E7%94%A8-Travis-CI-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-Hexo-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 静态博客</a></p><p><a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">GitHub Pages Deployment</a></p><p><a href="https://hexo.io/zh-cn/docs/github-pages#" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a></p><p><a href="https://segmentfault.com/a/1190000021815477" target="_blank" rel="noopener">使用 GitHub Actions 自动部署博客教程</a></p><p><a href="https://www.cnblogs.com/deppwang/p/12326906.html" target="_blank" rel="noopener">使用 GitHub Actions 实现 Hexo 博客自动部署</a></p><p><a href="https://gyh.im/posts/9d3b758e/" target="_blank" rel="noopener">Github_Action自动构建Hexo实现Coding和Github双部署</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/zm219o.png&quot; alt=&quot;zm219o&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原本根据 &lt;a href=&quot;https://www.jianshu.com/p/60de63b14ae5?from=jiantop.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo的版本控制与持续集成&lt;/a&gt;，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 &lt;a href=&quot;https://hexo.io/zh-cn/docs/github-pages#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;将 Hexo 部署到 GitHub Pages&lt;/a&gt;，成功利用 &lt;a href=&quot;https://travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI&lt;/a&gt; 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 &lt;a href=&quot;https://github.com/actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Action&lt;/a&gt; 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程" scheme="/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
