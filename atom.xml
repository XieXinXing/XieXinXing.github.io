<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢欣欣已经长大</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2021-01-02T15:32:58.466Z</updated>
  <id>/</id>
  
  <author>
    <name>长大了的谢星星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown + 阿里云图床</title>
    <link href="/2021/01/01/Markdown+%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A/"/>
    <id>/2021/01/01/Markdown+阿里云图床/</id>
    <published>2021-01-01T21:40:32.000Z</published>
    <updated>2021-01-02T15:32:58.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/g8v8zd.jpg" alt="g8v8zd"></p><blockquote><p>引言：虽然我一直在用 Snipaste，但我主要使用截图后贴图功能，可以很方便进行对比查看，其编辑样式也比较好看。但是 Snipaste 不支持滚动截图，而且编辑样式没有阴影。其实滚动截图倒是不常用，而且 FSCapture 就足够。只是我一直想找一个能截图自带阴影的截图工具。用了 Winsnap，感觉阴影感一般。似乎 Ashampoo Snap 也可以，但没深入使用。Snagit 编辑功能比较强大，就是太笨重。最后选择了 ShareX，不仅可以添加自定义阴影，还有圆角等图像效果，最强的还是有截图上传等众多功能。另外用了一下截图后贴图的 Setuna，不好用。体验了无边框的图片浏览器 Vieas 和 MassiGra，都还不错，不过最后还是回归了 Honeyview。当然还有很多优秀的截图看图工具，在此只是选择了符合自己需求的而已。</p></blockquote><a id="more"></a><h1 id="AliyunOss配置图床"><a href="#AliyunOss配置图床" class="headerlink" title="AliyunOss配置图床"></a>AliyunOss配置图床</h1><p>注册并登录，在<a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">阿里云对象储存OSS</a>页面选择 <strong>折扣套餐</strong>，如下图购买一年只需要 9 元：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609587517.png" alt="LYKISUN_2021-01-02_1609587517.png"> </p><p>购买完成后回到首页，点击右上方的控制台，进入<a href="https://homenew.console.aliyun.com/home/scene/Operation" target="_blank" rel="noopener">个人控制台</a>，在左侧找到 <code>对象储存OSS</code> 并点击进入：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609587596.png" alt="LYKISUN_2021-01-02_1609587596.png"> </p><p>选择左侧 <code>Bucket列表 -&gt; 创建Bucket</code>，弹出的 <code>OSS版本控制</code> 是否开通看个人选择，然后进行参数填写。注意 <code>读写权限</code> 一项要选择 <code>公共读</code>，然后点击确定进行创建：</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609587897.png" width="500"></div> <p>创建成功后鼠标放置在左上角头像上，在弹出的窗口中选择 <code>访问控制</code>:</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609588029.png" width="250"></div> <p>选择左侧 <code>用户 -&gt; 创建用户</code>，然后填写参数，勾选编程访问：</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609590844.png" width="600"></div><p>复制显示的 <code>keyid</code> 和 <code>keySecret</code> ，关闭后不再显示，若遗失点击进入用户可以重新创建：</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609594313.png" width="600"></div><p>创建用户后选择用户添加权限，勾选 <code>AliyunOSSFullAccess</code> 后点击确定：</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609593685.png" width="600"></div><p>创建到此就完成了，可以在 Bucket 创建文件夹放置文件。</p><h1 id="Typora-PicGo-阿里云图床"><a href="#Typora-PicGo-阿里云图床" class="headerlink" title="Typora+PicGo+阿里云图床"></a>Typora+PicGo+阿里云图床</h1><p>其实首先我是在接触 MD 语法，插入图片的时候想这个问题的。因为手机上我使用<strong>纯纯写作</strong>等支持 MD 语法的 APP 进行记录，考虑很多 APP 对于图片的备份都不太友好，因此选择了<strong>阿里云对象储存</strong>作为图床，使用<strong>咕咚云图</strong>作为上传到图床的媒介，可以很方便地上传并生成插入链接并赋值到剪切板。于是在 PC 端使用 Typora + PicGo + 阿里云图床的方式，直接拖拽图片进 Typora 自动上传到阿里云图床。</p><p>首先下载 <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>。Typora 内有三种配置 PicGo 的方式，这里我选择 PicGo(app)，下载客户端，选择 PicGo 路径。</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20210101174003426.png" alt="image-20210101174003426"></p><p>再在 PicGo 上进行阿里云图床配置 (阿里云图床设置以及其他图床配置直接搜索即有相关内容)：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609518301.png" alt="LYKISUN_2021-01-02_1609518301.png"> </p><p>详细参数设置参考：<a href="https://zhuanlan.zhihu.com/p/63557477" target="_blank" rel="noopener">阿里云 oss 搭建图床以及使用 PicGO 上传图片到图床</a>。</p><p>设置完成后直接将图片拖曳或者粘贴到 Typora 即可。</p><h1 id="Sharex-阿里云图床"><a href="#Sharex-阿里云图床" class="headerlink" title="Sharex+阿里云图床"></a>Sharex+阿里云图床</h1><p>首先设置截图命名规则。以下是我截图文件命令规则：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20210101180925644.png" alt="image-20210101180925644"></p><p>根据 <a href="https://help.aliyun.com/document_detail/179388.html?spm=a2c4g.11186623.2.17.621b4a30CH60ve#concept-1937458" target="_blank" rel="noopener">ossutil 本地上传文件</a>、<a href="https://help.aliyun.com/document_detail/120075.html?spm=a2c4g.11186623.4.1.1ac260d4nFiIdf" target="_blank" rel="noopener">ossutil 下载及配置地址</a> 下载并配置好 ossutil 参数。</p><p>选择合适的地方(例如 ossutil 文件夹)新建 bat 文件，内容填写如下：</p><pre><code class="bat">@ECHO OFF::获取传入参数input赋值给para1,此参数由sharex生成,位于sharex所在文件夹内,::例:&quot;D:\Install\Portable\ShareX\ShareX\Screenshots\2021-01\LYKISUN_2021-01-01_1609499598.png&quot;Set para1=%1::将input参数的&quot;替换为空,即去除双引号并赋值给p1set p1=%para1:&quot;=%::获取路径最后的图片第55位至倒数第1位,即图片名称赋值给p2。不同路径注意修改set p2=%para1:~55,-1%::获取截图所在目录赋值给p3。不同路径注意修改set p3=%para1:~1,54%::运行命令:1.切换至ossutil64所在目录;2.上传阿里云命令;3.将md表达式输出至剪切板，注意我的图片是储存在Bucket的ossutil文件夹中;4.退出，隐藏窗口时必须加上才能完成命令。不同命令用&amp;&amp;连接cmd /k &quot;cd /d D:\Install\ForCode\ossutil64 &amp;&amp; ossutil64 cp %p1% oss://kisun-pic/ossutil/ &amp;&amp; echo ![%p2%](https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/%p2%) | clip &amp;&amp; exit&quot;</code></pre><blockquote><p>MD 中以 <code>![]()</code> 方式插入如图片不支持大小和位置修改，但是 MD 支持 Html ，可以使用以下格式控制图片大小和左右居中位置：</p><pre><code>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;path&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;name&quot;/&gt;&lt;/div&gt;</code></pre><p>因此上述 Bat 文件中最后的命令也可以修改为：</p><pre><code class="bat">@ECHO OFFset para1=%1set p1=%para1:&quot;=%set p2=%para1:~37,-1%set p3=%para1:~1,36%cmd /k &quot;cd /d D:\Install\ForCode\ossutil64 &amp;&amp; ossutil64 cp %p1% oss://kisun-pic/ossutil/ &amp;&amp; exit&quot;set/p=&quot;&lt;div align=center&gt;&lt;img src=&quot;https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/%p2%&quot; width=&quot;600&quot; height=&quot;300&quot;&gt;&lt;/div&gt;&quot;&lt;nul | clip</code></pre></blockquote><p>然后打开 sharex 根据下图配置：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20210101174314604.png" alt="image-20210101174314604"></p><p>然后设置截图后动作：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609526876.png" alt="LYKISUN_2021-01-02_1609526876.png">  </p><p>勾选<strong>删除本地文件</strong>可以在执行动作后删除本地文件。</p><p>最后进行快捷键设置。进行截图后就会运行 Bat 文件将截图上传到阿里云图床的 ossutil 文件夹，并将插入 md 的链接格式自动输出到剪切板，然后直接在 MD 文件中粘贴即可：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-01_1609500851.png" alt="LYKISUN_2021-01-01_1609500851.png"></p><p>当然，如果你第一步使用 Typora 设置了 PicGo，你也可以不必设置 ShareX，直接勾选截图后动作里面的<strong>复制到剪切板</strong>，然后直接在 Typora 里面粘贴即可，Typora 会运行 PicGo 自动上传。当然，ShareX 还支持相当多的其他上传工具，体验一下就知道其强大了。</p><blockquote><p>注：图片名称存在全角符号，上传 Hexo 后路径会出现问题导致无法显示。</p></blockquote><h1 id="VSCode-PicGo-阿里云图床"><a href="#VSCode-PicGo-阿里云图床" class="headerlink" title="VSCode+PicGo+阿里云图床"></a>VSCode+PicGo+阿里云图床</h1><p>使用 VSCode 不用插件就能编辑和预览 MD 文件，也可以安装 <code>Markdown All in One</code>、<code>Markdown Preview Enhanced</code>、<code>Maridown pdf</code> 等插件使用更加丰富的功能。要使用图床上传图片可以安装 <code>PicGo</code> 插件。</p><p>在 VsCode 搜索并安装 PicGo 插件，在插件配置处按如下配置：</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609595409.png" width="600"></div><p>其中 <code>Area</code> 和 <code>Custom Url</code> 要根据自己创建 Bucket 时选择的地区修改。</p><p>修改 <code>Pic Bed:Current</code> 为 <code>aliyun</code>：</p><div align="center"><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/LYKISUN_2021-01-02_1609595296.png" width="600"></div><p>当然喜欢使用 Sublime Text 编辑器的话也能配置 MD 编辑和实时预览，但是预览需要使用浏览器这一点我不太喜欢，因此没有选择我最常用的 ST3 来编辑 MD 文件。</p><hr><p><em>参考链接</em></p><p><a href="https://zhuanlan.zhihu.com/p/63557477" target="_blank" rel="noopener">阿里云 oss 搭建图床以及使用 PicGO 上传图片到图床</a></p><p><a href="https://blog.csdn.net/qq_35621494/article/details/106431899" target="_blank" rel="noopener">VSCode+PicGo+AliyunOss 搭建 Markdown 图床</a></p><p><a href="https://help.aliyun.com/product/31815.html?spm=a2c4g.11186623.6.540.1ac260d4XJTcLr" target="_blank" rel="noopener">对象存储 OSS</a></p><p><a href="https://help.aliyun.com/document_detail/120075.html?spm=a2c4g.11186623.4.1.1ac260d4nFiIdf" target="_blank" rel="noopener">命令行工具 ossutil</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/g8v8zd.jpg&quot; alt=&quot;g8v8zd&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引言：虽然我一直在用 Snipaste，但我主要使用截图后贴图功能，可以很方便进行对比查看，其编辑样式也比较好看。但是 Snipaste 不支持滚动截图，而且编辑样式没有阴影。其实滚动截图倒是不常用，而且 FSCapture 就足够。只是我一直想找一个能截图自带阴影的截图工具。用了 Winsnap，感觉阴影感一般。似乎 Ashampoo Snap 也可以，但没深入使用。Snagit 编辑功能比较强大，就是太笨重。最后选择了 ShareX，不仅可以添加自定义阴影，还有圆角等图像效果，最强的还是有截图上传等众多功能。另外用了一下截图后贴图的 Setuna，不好用。体验了无边框的图片浏览器 Vieas 和 MassiGra，都还不错，不过最后还是回归了 Honeyview。当然还有很多优秀的截图看图工具，在此只是选择了符合自己需求的而已。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="截图" scheme="/tags/%E6%88%AA%E5%9B%BE/"/>
    
      <category term="图床" scheme="/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>缘何而来</title>
    <link href="/2020/12/20/%E7%BC%98%E4%BD%95%E8%80%8C%E6%9D%A5/"/>
    <id>/2020/12/20/缘何而来/</id>
    <published>2020-12-20T01:36:15.000Z</published>
    <updated>2021-01-02T15:32:58.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘何而来"><a href="#缘何而来" class="headerlink" title="缘何而来"></a>缘何而来</h1><ul><li>为何建站</li><li>为何记录</li><li>为何怀念</li></ul><a id="more"></a><p>我要怀念谢欣欣。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘何而来&quot;&gt;&lt;a href=&quot;#缘何而来&quot; class=&quot;headerlink&quot; title=&quot;缘何而来&quot;&gt;&lt;/a&gt;缘何而来&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;为何建站&lt;/li&gt;
&lt;li&gt;为何记录&lt;/li&gt;
&lt;li&gt;为何怀念&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="生活" scheme="/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>自动部署 Hexo 静态博客</title>
    <link href="/2020/12/20/CI%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>/2020/12/20/CI部署Hexo博客/</id>
    <published>2020-12-20T01:17:32.000Z</published>
    <updated>2021-01-02T15:32:58.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/zm219o.png" alt="zm219o"></p><blockquote><p>原本根据 <a href="https://www.jianshu.com/p/60de63b14ae5?from=jiantop.com" target="_blank" rel="noopener">Hexo的版本控制与持续集成</a>，想要使用 <a href="https://ci.appveyor.com/" target="_blank" rel="noopener">AppVeyor</a> 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 <a href="https://hexo.io/zh-cn/docs/github-pages#" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a>，成功利用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 <a href="https://github.com/actions" target="_blank" rel="noopener">Github Action</a> 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。</p></blockquote><a id="more"></a><h1 id="利用Travis-CI自动部署"><a href="#利用Travis-CI自动部署" class="headerlink" title="利用Travis_CI自动部署"></a>利用Travis_CI自动部署</h1><blockquote><p>这种方法与前面直接进行部署的方法不同，是从使用 <code>hexo cl &amp; hexo g &amp; hexo d</code> 的前一步开始的。</p></blockquote><h2 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h2><p>创建一个用来存储 Hexo 项目源代码和静态页面的 <a href="https://github.com/new" target="_blank" rel="noopener">GitHub 仓库</a>，如果你希望你的站点能通过 <code>&lt;GitHub 用户名&gt;.github.io</code> 域名访问， repository 应该直接命名为 <code>&lt;GitHub 用户名&gt;.github.io</code>。</p><ul><li>用 <code>master 分支</code> 来存储 hexo 博客项目源代码。</li><li>用 <code>gh-pages 分支</code> 存储来编译生成后静态页面。</li></ul><p>当 <code>master 分支</code>的源代码（主题文件，文章 md 文件、图片等）有变动时，CI 会自动编译并部署到 <code>gh-pages 分支</code>。</p><blockquote><p>注：使用Travis需要将源码放在<code>&lt;GitHub 用户名&gt;.github.io</code> ，由于前面已经将<code>&lt;GitHub 用户名&gt;.github.io</code> 进行了博客部署，因此要么将仓库删除重建或者移到分支，要么新注册账号。建议直接删除重建，后者还涉及不同 Github 布置 SSH 问题。如果不想麻烦，建议跳到后面 <a href="#利用Github_Action自动部署">利用Github_Action自动部署</a>。</p></blockquote><h2 id="Travis-CI关联项目仓库"><a href="#Travis-CI关联项目仓库" class="headerlink" title="Travis_CI关联项目仓库"></a>Travis_CI关联项目仓库</h2><p>在<strong>用户头像处</strong>点击 <code>Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</code> 创建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">github 访问令牌</a> ，<strong>名称</strong>随意，勾选 <code>repo</code> 选项，然后复制密匙：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229213904534.png" alt="image-20201229213904534"></p><p>使用 GitHub 账号登录 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI 官网</a>，关联你的 hexo 博客项目仓库。在所列出来的仓库里找到你的 <code>hexo 项目仓库</code>，点击 <code>Settings</code> 。增加环境变量，名称随意但是<strong>后面需要使用</strong>，我在这里设置为<code>GH_TOKEN</code> ，值一栏粘贴入在前面生成的 <code>GitHub Token</code>，最后点击 <strong>Add</strong> 添加：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229222055509.png" alt="image-20201229222055509"> </p><h2 id="添加-travis-yml文件"><a href="#添加-travis-yml文件" class="headerlink" title="添加.travis.yml文件"></a>添加.travis.yml文件</h2><p>在你的 Hexo 博客项目<strong>根文件夹</strong>下添加 Travis CI 的配置文件 <code>.travis.yml</code>。</p><p><code>.travis.yml</code> 文件的内容如下：</p><pre><code>sudo: falselanguage: node_jsnode_js:  - 12cache: npmbranches:  only:    - master # build master branch onlyscript:  - hexo generatedeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN   #这里为环境变量名称  keep-history: true  on:    branch: master  local-dir: public</code></pre><h2 id="push源码"><a href="#push源码" class="headerlink" title="push源码"></a>push源码</h2><p>将你的 hexo 项目代码 push 到 GitHub 仓库的 <code>master 分支</code>，Travis CI 检测到 master 分支代码有变动，会自动执行脚本命令，将 hexo 项目编译生成静态页面，部署到 <code>gh-pages</code> 分支。</p><p>部署方法，在 Hexo项目根目录右键 <code>Git Bash Here</code>：</p><pre><code class="git">1. git init      #首次Push2. git remote add origin https://github.com/Lykisun/xxx.git  #首次Push3. git add .     #首次Push，后面也可将.改为发生变动的文件4. git commit -m &quot;init&quot;     #引号内为注释内容5. git push -u origin msater  </code></pre><blockquote><p>若命令2报错：<code>git remote add origin https://github.com/Lykisun/xxx.git</code></p><p>则先执行：<code>git remote rm origin</code></p><p>然后再执行：<code>git remote add origin https://github.com/Lykisun/xxx.git</code></p><p>其他报错自行搜索皆有解决方案。</p></blockquote><h2 id="设置Github-Pages"><a href="#设置Github-Pages" class="headerlink" title="设置Github_Pages"></a>设置Github_Pages</h2><p>在 GitHub 中前往<strong>仓库</strong>的 <code>setting-&gt;Options</code>，往下修改 <code>GitHub Pages</code> 的部署分支为 <code>gh-pages</code> 然后 <strong>Save</strong>，即可通过<code>&lt;你的 GitHub 用户名&gt;.github.io</code> 域名访问（这里我已经删除gh-pages分支因此没有显示）：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229223430565.png" alt="image-20201229223430565"></p><p>如果<strong>显示404</strong>只需要等待一段时间。</p><h1 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h1><p>参考了几篇文章，失败了好多次，终于成功使用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 将 Hexo 博客部署到 GitHub Pages 上，但这也意味着站点文件将会是公开的。虽然并没有什么重要文件，但是还是希望能够把源码放在私密仓库。</p><p>一开始的时候我就觉得应该有两种<strong>思路</strong>： </p><ol><li>源码推送到<code>User.github.io</code>公开仓库，<code>hexo g</code>后推送到分支，将分支作为博客仓库；</li><li>源码推送到<code>private</code>私密仓库，然后自动构建<code>public</code>文件推送到<code>User.github.io</code> 公开仓库。</li></ol><p>由于一开始我就已经建立了部署博客的<code>User.github.io</code> 公开仓库，因此在尝试第一种思路的时候我特意去新申请了一个 Github 账号，不同账号使用 SSH 也出现了让我头秃的问题。但是第二种思路并不需要我们改动已经建立好的博客。</p><p>第一种思路成功后我就开始尝试第二种。我在搜索后没有发现<strong>利用 Travis CI 使用私密仓库跨仓库部署推送的相关文章</strong>，好像之前 Travis CI 对于私密仓库是收费的，现在免费但也有次数限制。进行了好几次尝试之后，每次要么编译失败，要么就只是部署到原仓库的分支，于是放弃。</p><p>最后我搜索到 <a href="https://segmentfault.com/a/1190000021815477" target="_blank" rel="noopener">使用 GitHub Actions 自动部署博客教程</a> ，发现 Github 本身就有免费的 CI 功能，于是开始尝试利用 Github Action 开始了第二种思路。</p><h1 id="利用Github-Action自动部署"><a href="#利用Github-Action自动部署" class="headerlink" title="利用Github_Action自动部署"></a>利用Github_Action自动部署</h1><h2 id="配置Github-Token"><a href="#配置Github-Token" class="headerlink" title="配置Github_Token"></a>配置Github_Token</h2><p>在<strong>用户头像处</strong>点击 <code>Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</code> 创建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">github 访问令牌</a> ，<strong>名称</strong>随意，勾选 <code>repo</code> 选项，然后复制密匙：<br><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229213904534.png" alt="image-20201229213904534"></p><p>新建用来存放源码的<strong>私密仓库</strong>，名称无妨，在<strong>仓库</strong>的 <code>Setting-&gt;Secrets-&gt;New repositorysecret</code> 添加新<strong>Secret</strong>，名称随意但是<strong>后面需要使用</strong>，我这里设置为 <code>ACCESS_TOKEN</code>，内容粘贴入刚才复制的 <code>token</code> ：<br><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229214844338.png" alt="image-20201229214844338"></p><blockquote><p>不同文章设置不太一样，有的用生成的ssh设置的，有的还要设置博客仓库的Deploy keys的，不过我用那些方法都失败了，只用上述办法才成功。</p></blockquote><h2 id="Push源码"><a href="#Push源码" class="headerlink" title="Push源码"></a>Push源码</h2><p>同第一节<a href="#PUSH源码">PUSH</a>小节。</p><h2 id="配置-GitHub-Actions"><a href="#配置-GitHub-Actions" class="headerlink" title="配置 GitHub Actions"></a>配置 GitHub Actions</h2><p>在<strong>私密仓库</strong>的 <code>Action-&gt;New workflow</code> 添加新 Action 文件，这里有很多 Action 模板和别人造好的 Action，后续需要可以进行了解使用，这里我们直接选择 <code>set up a workflow yourself</code>，会在仓库新建 <code>.github/workflows/xxx.yml</code> ，然后填入以下内容：</p><pre><code class="yml"># workflow namename: CI Hexo Blog Deploy LTS# master branch on push, auto runon:   push:    branches:      - masterjobs:  Deploy-Pages:     name: Deploy Hexo Public To Pages    runs-on: ubuntu-latest     steps:    # check it to your workflow can access it    # from: https://github.com/actions/checkout    - name: Checkout Repository master branch      uses: actions/checkout@master     # from: https://github.com/actions/setup-node      - name: Setup Node.js 12.x       uses: actions/setup-node@master      with:        node-version: &quot;12.x&quot;    - name: Setup Git Infomation      run: |         git config --global user.name &#39;Github用户名&#39;           #修改处        git config --global user.email &#39;Github注册邮箱&#39;        #修改处    - name: Get Latest Commit Message       run: |        git log --pretty=format:&quot;%s from Github Actions at `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot; --date=short -n 1  &gt; commit-message.log    - name: Setup Hexo Dependencies      run: |        npm install hexo-cli -g        npm install    - name: Generate public files      run: |        hexo clean        hexo generate     - name: Deploy To Github Pages       env:        Github_Pages: github.com/Github用户名/Github用户名.github.io    #修改处        Github_Token: ${{ secrets.ACCESS_TOKEN }}                      #修改处      run: |          git clone https://${Github_Pages} .github_pages        cd .github_pages        git checkout master        cd ../        mv .github_pages/.git/ ./public/        cd ./public/        git add .        git commit -F ../commit-message.log        git push --force --quiet &quot;https://${Github_Token}@${Github_Pages}&quot; master:master</code></pre><blockquote><p>注：以上需要更改 <strong>Github用户名</strong>、<strong>Github注册邮箱</strong>，以及刚才你设置的 <strong>Secret 名称</strong>。</p><p>有的相关文章中直接使用了别人的 Action ，但是我使用后一直出现 <code>fatal: could not read Username for https://github.com: No such file or directory</code> 的错误，没有找到解决方法，就换了一种方式。</p></blockquote><p>完成后提交到仓库，就会开始自动构建并部署：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229220335065.png" alt="image-20201229220335065"></p><p>在我重新进行部署的时候，由于我用另一个账号新建了 <code>Github用户名.github.io</code> 仓库，然后将源码推送到新建的<strong>私密仓库</strong>，再建立 Action 后，出现了以下错误：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229233904987.png" alt="image-20201229233904987"></p><p>这是由于<code>Github用户名.github.io</code> 仓库并没有 <strong>master</strong> 分支的缘故（如果之前用本地 Hexo d 建立的仓库未删除就不需会有此问题），因此可以 PUSH 一个 README 文件上去并将其设为 <strong>master</strong> 分支，或者直接建立的时候勾选 README 选项，当然也可以在仓库建立，我就是直接新建的，不过这样产生的分支名称是 <strong>main</strong> ，上述 <code>xxx.yml</code> Action文件就要调整 <code>master</code> 为 <code>main</code>：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229235139425.png" alt="image-20201229235139425"></p><p>然后就成功了：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201229235239701.png" alt="image-20201229235239701"></p><p>之后就可以看到博客的更新了。今后可以在源码仓库直接修改文件或者本地修改后推送到源码仓库，就会自动构建然后推送到博客仓库，一来备份了源码，二来免去部署步骤。</p><hr><p>在我更新两篇文章后，Action 出现以下错误：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201230011102921.png" alt="image-20201230011102921"></p><p>改了改又后来出现错误：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201230012250184.png" alt="image-20201230012250184"></p><p>搜索后发现原因和办法：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201230012315603.png" alt="image-20201230012315603"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="使用自定义域名访问"><a href="#使用自定义域名访问" class="headerlink" title="使用自定义域名访问"></a>使用自定义域名访问</h3><p>你可以使用自己的域名来访问 GitHub Pages 服务，只需在 hexo 项目的 <code>source</code> 目录下添加 <code>CNANE</code> 文件。</p><p><code>CNANE</code> 文件内容为自定义域名，例如：xxx.xxx.cn，然后在仓库 <code>Settings</code> 开启<strong>域名 https 协议</strong>。</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201230010305353.png" alt="image-20201230010305353"></p><h3 id="Project-page"><a href="#Project-page" class="headerlink" title="Project page"></a>Project page</h3><p>如果你更希望你的站点部署在 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 修改为 <code>&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尝试下来，当然是 Github Action 更加简单快捷，而且是免费的，功能更加丰富，因此建议使用 Github Action。当然还有其他的CI工具，我就没有试用了。</p><hr><p><em>参考链接</em></p><p><a href="https://keep.xpoet.cn/2020/11/%E4%BD%BF%E7%94%A8-Travis-CI-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-Hexo-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 静态博客</a></p><p><a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">GitHub Pages Deployment</a></p><p><a href="https://hexo.io/zh-cn/docs/github-pages#" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a></p><p><a href="https://segmentfault.com/a/1190000021815477" target="_blank" rel="noopener">使用 GitHub Actions 自动部署博客教程</a></p><p><a href="https://www.cnblogs.com/deppwang/p/12326906.html" target="_blank" rel="noopener">使用 GitHub Actions 实现 Hexo 博客自动部署</a></p><p><a href="https://gyh.im/posts/9d3b758e/" target="_blank" rel="noopener">Github_Action自动构建Hexo实现Coding和Github双部署</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/zm219o.png&quot; alt=&quot;zm219o&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原本根据 &lt;a href=&quot;https://www.jianshu.com/p/60de63b14ae5?from=jiantop.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo的版本控制与持续集成&lt;/a&gt;，想要使用 &lt;a href=&quot;https://ci.appveyor.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AppVeyor&lt;/a&gt; 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 &lt;a href=&quot;https://hexo.io/zh-cn/docs/github-pages#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;将 Hexo 部署到 GitHub Pages&lt;/a&gt;，成功利用 &lt;a href=&quot;https://travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI&lt;/a&gt; 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 &lt;a href=&quot;https://github.com/actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Action&lt;/a&gt; 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程" scheme="/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github 搭建博客记录</title>
    <link href="/2020/12/20/Hexo+Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>/2020/12/20/Hexo+Github搭建博客/</id>
    <published>2020-12-20T01:17:32.000Z</published>
    <updated>2021-01-02T15:32:58.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/blog/2020-12/wyeder.jpg" alt></p><blockquote><p>闲来无事心血来潮想码码代码，于是便想搭建一个博客，起初是想学 Python，于是通过搜索终于看见一篇 <code>Python+Django</code> 搭建博客的挺详细的教程：<a href="https://www.dusaiphoto.com/article/2/" target="_blank" rel="noopener">Django 搭建个人博客</a>，于是兴高采烈地跟着<del>复制</del><strong>码</strong>代码，可是到后面我突然意识到，要部署到服务器意味着要购买域名和云服务器，然后进行配置，一来麻烦二来烧钱，不过是玩玩而已，遂放弃。接着我又看到 <code>PHP+WordPress</code> 搭建博客的教程：<a href="https://www.ghpym.com/ghjz001.html" target="_blank" rel="noopener">果核建站教程</a>，相比于之前自己码一堆代码，这个方便很多，但是同样要购买云服务器和域名的。后来我在B站看到 <code>Gitee+Hexo</code> 搭建博客教程：<a href="https://www.bilibili.com/video/BV1uE411L7kB?from=search&amp;seid=10102720236753141589" target="_blank" rel="noopener">零成本-搭建私人永久博客</a>，才知道可将博客托管到 Gitee 或者 Github 上。于是进而搜索到几篇相对详细的关于 <code>Github+Hexo</code> 搭建免费博客的教程，其参考链接附在文末。</p></blockquote><a id="more"></a><h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><pre><code class="html">本博客在 Window10 环境下搭建。</code></pre><ul><li>安装 Git、Node.js</li></ul><p>下载并安装 <a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a>、<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>。除了安装路径，我全部选择默认选项安装。</p><blockquote><p>安装完成后可以运行以下命令行验证是否安装完成：<br><code>git --version</code><br><code>node -v</code><br><code>npm -v</code><br>若出错可尝试检查环境变量路径或重启电脑或重新安装。</p></blockquote><ul><li>安装 Hexo</li></ul><p>在随意位置鼠标右键 <code>Git Bash Here</code></p><blockquote><p>后面提到命令若无特别说明在根目录下 <code>git bash</code> 运行。</p></blockquote><p>输入<code>npm install -g hexo</code>，回车安装 Hexo。</p><blockquote><p>其安装时间较长，若长时间未反应可参考 <a href="https://blog.csdn.net/jzooo/article/details/46781805" target="_blank" rel="noopener">零基础免费搭建个人博客-hexo+github</a>中关于安装 hexo 部分：</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><code>cnpm install -g hexo-cli</code></p><p>安装过程显示 warn ：<code>npm WARN deprecated fsevents@2.1.3: Please update to v 2.2.x</code>，忽略即可：</p><p><code>cnpm install hexo --save</code></p><p>若出现错误，根据错误直接百度。</p><p>安装完成后查看是否成功：<code>hexo -v</code></p></blockquote><h2 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h2><ul><li>创建文件夹</li></ul><p>根据自己情况选择合适位置建立文件夹用以存放相应文件，例：<code>D:\Blog</code>。</p><ul><li>初始化 hexo</li></ul><p>在Blog文件下，右键<code>Git Bash Here</code>，输入命令：<code>hexo init</code>，进行初始化。</p><ul><li>初始配置</li></ul><p>打开根文件夹下的<code>_config.yml</code>文件，进行基础配置。</p><table><thead><tr><th>参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>title</td><td style="text-align:center">网站标题</td></tr><tr><td>subtitle</td><td style="text-align:center">网站副标题</td></tr><tr><td>description</td><td style="text-align:center">网站描述</td></tr><tr><td>keywords</td><td style="text-align:center">网站的关键词。支援多个关键词。</td></tr><tr><td>author</td><td style="text-align:center">作者名字</td></tr><tr><td>language</td><td style="text-align:center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td>timezon</td><td style="text-align:center">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td></tr></tbody></table><p>更多配置参考：<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方文档</a></p><ul><li>浏览本地博客</li></ul><p>运行以下命令：</p><p><code>hexo g</code><br><code>hexo s</code></p><blockquote><p>更多 hexo 命令参考：<a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">hexo常用命令笔记</a></p></blockquote><p>在浏览器输入<code>localhost:4000</code>，可浏览本地博客效果：</p><p><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/blog/2020-12/newblog.jpg" alt title="效果图"></p><p>按 <code>Ctrl+C</code> 可关闭 server。</p><h2 id="博客写作"><a href="#博客写作" class="headerlink" title="博客写作"></a>博客写作</h2><ul><li>新增博客</li></ul><p>可在 <code>D:\Blog\source\_posts</code> 文件夹下新建 <code>博文标题.md</code> 文件。</p><p>也可运行命令行 <code>hexo new &quot;博文标题&quot;</code>，新生成文件开头是一些初始化设置，可以在 <code>\scaffolds\posts.md</code> 中修改默认设置:</p><pre><code>---title: {{ title }}date: {{ date }}tags: top:---</code></pre><p>同样在 <code>\scaffolds</code> 文件夹中可以自己建立模板，例如 <code>demo.md</code>，输入命令 <code>hexo new demo &quot;博文标题&quot;</code> 就可以直接使用模板了。</p><pre><code>---title: 示例date: 2020-12-20 18:10:10tags: - 标签1- 标签2top: 3 #自定义文章排序---正文</code></pre><blockquote><p>注意 <code>_config.yml</code> 中有个 <code>permalink</code> 设置，默认为 <code>permalink: :year/:month/:day/:title/</code>，即存放博客文章的<code>永久链接</code>格式，例如新建了一篇 <code>Hexo+Github搭建博客记录</code> 博文，其将被存放到 Github 仓库的 <code>Lykisun.github.io/2020/12/20/Hexo+Github搭建博客记录/</code> 目录。</p></blockquote><blockquote><p><strong>如何让博文列表不显示全部内容</strong>：<br>在合适的位置加上 <code>&lt;!--more--&gt;</code> 即可。</p></blockquote><h1 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h1><blockquote><p>本博客选择部署到 <code>github</code> 上。</p></blockquote><h2 id="配置-GitHub-仓库"><a href="#配置-GitHub-仓库" class="headerlink" title="配置 GitHub 仓库"></a>配置 GitHub 仓库</h2><ul><li>申请 github 账号</li><li>new repository</li></ul><p>点击右上角你的头像 -&gt; <code>Your repositories</code> -&gt; <code>New</code> 新建仓库。</p><p>在 <code>Repository name</code> 一栏填入 <code>{GithubID}.github.io</code>（ <code>{GithubID}</code> 为你的 GitHub ID，与前面的 <code>Owner</code> 一致，例如我的是 <code>Lykisun/Lykisun.github.io</code> ），<code>Description</code> 可不填，然后点击 <code>Create repository</code> 添加新仓库。</p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 <strong>_config.yml</strong></h2><ul><li>在 <code>_config.yml</code> 进行配置</li></ul><p>在文件末修改：</p><pre><code class="yml">deploy:  type: git  repo: https://github.com/Github用户名/Github用户名.github.io.git  branch: master</code></pre><blockquote><p>若 <code>hexo d</code> 出现 <code>fatal: unable to access https://github</code>类错误，将 <code>repo</code> 地址改为 <code>SSH</code> 地址：git@githu .com:User/User.github.io.git` </p></blockquote><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><ul><li>配置 SSH Key</li></ul><p>输入命令 <code>ssh-keygen -t rsa -C {email}</code> 来生成 SSH，其中 <code>{email}</code> 为你注册 github 的邮箱账号，直接三次回车即可。<br>完成后用记事本打开 <code>C:\Users\用户名\.ssh\id_rsa.pub</code> 并复制 ssh key 公钥。<br>回到 GitHub，点击头像 -&gt; <code>Setting</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code>， <code>Title</code> 可不填，将复制内容填入 <code>Key</code> 栏，然后点击 <code>Add SSH key</code>。<br>运行命令 <code>ssh -T git@github.com</code>，若出现 <code>Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 表示 SSH 配置成功。</p><p>输入命令 <code>npm install hexo-deployer-git --save</code> 安装 <code>deployer</code> 。</p><ul><li>部署博客</li></ul><p>依次输入命令：<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>此过程第一次发布会弹出浏览器页面登陆Github验证并授权，显示 <code>INFO Deploy done: git</code> 即部署完成。打开你的 Github 仓库 <code>https://github.com/Lykisun/Lykisun.github.io/</code> 可以看见部署文件，打开 <code>Lykisun.github.io</code> 就可以看到你的博客了。</p><blockquote><p>若出现错误 <code>git config --global user.email &quot;you@example.com&quot;git config --global user.name&quot;Your Name&quot;</code>，则按提示依次输入 <code>git config --global user.email &quot;邮箱&quot;</code>，<code>git config --global user.name &quot;Github ID&quot;</code> 并回车即可。<br>若出现其他错误可参考 <a href="https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="noopener">史上最详细“截图”搭建Hexo博客并部署到Github</a>、<a href="https://www.jianshu.com/p/67c57c70f275" target="_blank" rel="noopener">hexo部署至Git遇到的坑</a> 相关错误解决办法，或直接搜索。</p></blockquote><h1 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h1><h2 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h2><p>在 Hexo官网<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes</a>可浏览主题，然后通过 <code>git clone 主题的github地址 themes/{name}</code> （<code>{name}</code>为主题名字，推荐使用最受欢迎的主题 <code>next</code>）命令或者根据主题的 Github 主页说明进行安装获取主题，下载的主题在 <code>Blog\themes\</code> 文件夹中。<br>下载好主题后，打开根目录下的 <code>_config.yml</code>，搜索 <code>theme</code> 将 <code>theme: landscape</code> 修改为 <code>theme: 下载的主题名</code>。</p><blockquote><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo 官网</a>，点击图片为打开该主题的 Demo 博客，点击下方蓝色的文字即可打开该主题的 GitHub 主页</p></blockquote><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>建议先使用配置完备的 <code>next</code> 主题，下载后打开 <code>Blog\themes\下载的主题\_config.yml</code> 主题配置文件进行配置，其配置参数一般可以在其 Github 主页或者直接在 <code>Blog\themes\下载的主题\README.md</code> 查看。例如 <code>Schemes</code> 参数：</p><pre><code># Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini</code></pre><p>可以选择不同主题样式，在其 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">GitHub 主页</a> 可以看到不同样式的 <code>Live Preview</code> 个人博客展示。<br>想阅读中文详细参数设置可参考：<a href="https://ouuan.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/#%E6%9C%AC%E5%9C%B0%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">hexo博客搭建指北</a></p><blockquote><p>我在使用next主题时并没有什么问题，但是在更换其他主题，博客页面显示：<br><img src="https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/PicGo/image-20201230011740346.png" alt="image-20201230011740346"></p></blockquote><blockquote><p>搜索后查到： <code>原因是hexo在5.0之后把 swig 给删除了需要自己手动安装。</code><br>运行 <code>npm i hexo-renderer-swig</code> 后，过一会就正常了。</p></blockquote><h1 id="博客维护"><a href="#博客维护" class="headerlink" title="博客维护"></a>博客维护</h1><p>上述方法部署博客，最终源码位于本地，生成文件部署在 Github 上。我们也可以将源码 PUSH 到 Github 上作为备份，当然这样子源码是公开的。</p><h2 id="Push-源代码"><a href="#Push-源代码" class="headerlink" title="Push 源代码"></a>Push 源代码</h2><p>在 Github 新建仓库，在 Blog 文件夹 <code>Git Bash Here</code>。</p><blockquote><p>在2020年10月1起，Github 默认主分支从 master 更名为 main，以往提交方式会默认创建一个 master 分支，执行 <code>git config --global init.defaultBranch main</code>，可将本地 <code>git init</code> 的时候默认分支修改为 main。由于我们之前默认以 master 作为仓库主分支，因此在此不进行更改。</p></blockquote><p>运行以下命令：<br><code>git init</code><br><code>git add .</code><br><code>git commit . -m &quot;initialize&quot;</code> //注释<br><code>git remote add origin git@github.com:Lykisun/HexoBlog.git</code>   //本地仓库和远程github关联<br><code>git pull --rebase origin master</code> //可选，若仓库存在例如README文件时报错可执行<br><code>git push -u origin master</code>  </p><blockquote><p>进行文件更新时： </p><p><code>git add 文件名</code></p><p><code>git commit . -m &quot;注释&quot;</code></p><p><code>git push -u origin main</code><br>删除分支：</p><p><code>git push origin :分支名称</code> （注意空格位置）</p></blockquote><h2 id="CI-控制"><a href="#CI-控制" class="headerlink" title="CI 控制"></a>CI 控制</h2><p>原本根据 <a href="https://www.jianshu.com/p/60de63b14ae5?from=jiantop.com" target="_blank" rel="noopener">Hexo的版本控制与持续集成</a>，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。</p><p>后来根据 <a href="https://hexo.io/zh-cn/docs/github-pages#" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a>，成功利用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 将源码备份到 Github 仓库，并实现自动编译部署到分支。此后只需要将改动 PUSH 到仓库，就会自动进行部署博客。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>若 <code>hexo d</code> 出现错误 <code>git config --global user.email &quot;you@example.com&quot;git config --global user.name&quot;Your Name&quot;</code>，则按提示依次输入 <code>git config --global user.email &quot;邮箱&quot;</code>，<code>git config --global user.name &quot;Github ID&quot;</code> 并回车即可。</li><li>若 <code>hexo d</code> 出现 <code>fatal: unable to access https://github</code>类错误，将 <code>repo</code> 地址改为 <code>SSH</code> 地址：<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:User/User.github.io.git`。</li><li>若<code>git remote add origin https://github.com/Lykisun/xxx.git</code> 报错：<code>git remote add origin https://github.com/Lykisun/xxx.git</code>， 则执行：<code>git remote rm origin</code>，然后再执行：<code>git remote add origin https://github.com/Lykisun/xxx.git</code>。</li></ol><hr><p><em>参考链接</em></p><p><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a><br><a href="https://theme-materialized.github.io/how-to-build-a-hexo-blog/" target="_blank" rel="noopener">Hexo博客搭建—从入门到精通</a><br><a href="https://ouuan.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/#%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%86%99%E4%BD%9C" target="_blank" rel="noopener">hexo博客搭建指北</a><br><a href="https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="noopener">史上最详细“截图”搭建Hexo博客并部署到Github</a><br><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的博客园</a><br><a href="https://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">Hexo搭建Github静态博客</a><br><a href="https://luuman.github.io/2015/12/27/GitHubHexo/" target="_blank" rel="noopener">使用GitHub搭建Hexo博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/blog/2020-12/wyeder.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闲来无事心血来潮想码码代码，于是便想搭建一个博客，起初是想学 Python，于是通过搜索终于看见一篇 &lt;code&gt;Python+Django&lt;/code&gt; 搭建博客的挺详细的教程：&lt;a href=&quot;https://www.dusaiphoto.com/article/2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 搭建个人博客&lt;/a&gt;，于是兴高采烈地跟着&lt;del&gt;复制&lt;/del&gt;&lt;strong&gt;码&lt;/strong&gt;代码，可是到后面我突然意识到，要部署到服务器意味着要购买域名和云服务器，然后进行配置，一来麻烦二来烧钱，不过是玩玩而已，遂放弃。接着我又看到 &lt;code&gt;PHP+WordPress&lt;/code&gt; 搭建博客的教程：&lt;a href=&quot;https://www.ghpym.com/ghjz001.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;果核建站教程&lt;/a&gt;，相比于之前自己码一堆代码，这个方便很多，但是同样要购买云服务器和域名的。后来我在B站看到 &lt;code&gt;Gitee+Hexo&lt;/code&gt; 搭建博客教程：&lt;a href=&quot;https://www.bilibili.com/video/BV1uE411L7kB?from=search&amp;amp;seid=10102720236753141589&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;零成本-搭建私人永久博客&lt;/a&gt;，才知道可将博客托管到 Gitee 或者 Github 上。于是进而搜索到几篇相对详细的关于 &lt;code&gt;Github+Hexo&lt;/code&gt; 搭建免费博客的教程，其参考链接附在文末。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程" scheme="/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
