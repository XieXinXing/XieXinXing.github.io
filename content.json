{"meta":{"title":"谢欣欣已经长大","subtitle":null,"description":"我又何必记录呢","author":"长大的谢星星","url":""},"pages":[{"title":"about","date":"2018-12-12T22:14:36.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T21:32:48.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T23:13:35.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T23:13:48.000Z","updated":"2020-12-29T16:37:19.419Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T23:13:05.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T21:47:59.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T23:11:06.000Z","updated":"2020-12-29T16:37:19.419Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T23:14:28.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T23:09:03.000Z","updated":"2020-12-29T16:37:19.419Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T22:14:16.000Z","updated":"2020-12-29T16:37:19.419Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T22:53:25.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T23:14:38.000Z","updated":"2020-12-29T16:37:19.419Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"缘何而来","slug":"缘何而来","date":"2020-12-20T01:36:15.000Z","updated":"2020-12-29T16:37:19.419Z","comments":true,"path":"2020/12/20/缘何而来/","link":"","permalink":"/2020/12/20/缘何而来/","excerpt":"缘何而来 为何建站 为何记录 为何怀念","text":"缘何而来 为何建站 为何记录 为何怀念 我要怀念谢欣欣。","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"/tags/笔记/"},{"name":"生活","slug":"生活","permalink":"/tags/生活/"}],"keywords":[]},{"title":"自动部署 Hexo 静态博客","slug":"CI 部署 Hexo 博客","date":"2020-12-20T01:17:32.000Z","updated":"2020-12-29T16:37:19.419Z","comments":true,"path":"2020/12/20/CI 部署 Hexo 博客/","link":"","permalink":"/2020/12/20/CI 部署 Hexo 博客/","excerpt":"原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 Github Action 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。","text":"原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 Github Action 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。 利用 Travis CI 自动部署 这种方法与前面直接进行部署的方法不同，是从使用 hexo cl &amp; hexo g &amp; hexo d` 的前一步开始的。 新建 GitHub 仓库创建一个用来存储 Hexo 项目源代码和静态页面的 GitHub 仓库，如果你希望你的站点能通过 &lt;GitHub 用户名&gt;.github.io 域名访问， repository 应该直接命名为 &lt;GitHub 用户名&gt;.github.io。 用 master 分支 来存储 hexo 博客项目源代码。 用 gh-pages 分支 存储来编译生成后静态页面。 当 master 分支的源代码（主题文件，文章 md 文件、图片等）有变动时，CI 会自动编译并部署到 gh-pages 分支。 注：由于前面已经将&lt;GitHub 用户名&gt;.github.io 进行了博客部署，因此要么将仓库删除重建，要么新注册账号。建议直接删除重建，后者还涉及不同 Github 布置 SSH 问题。 Travis CI 关联项目仓库在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 使用 GitHub 账号登录 Travis CI 官网，关联你的 hexo 博客项目仓库。在所列出来的仓库里找到你的 hexo 项目仓库，点击 Settings 。增加环境变量，名称随意但是后面需要使用，我在这里设置为GH_TOKEN ，值粘贴入在前面生成的 GitHub Token，最后点击 “Add” 添加： 添加 .travis.yml 文件在你的 Hexo 博客项目根文件夹下添加 Travis CI 的配置文件 .travis.yml。 .travis.yml 文件的内容如下： sudo: false language: node_js node_js: - 12 cache: npm branches: only: - master # build master branch only script: - hexo generate deploy: provider: pages skip-cleanup: true github-token: $GH_TOKEN #这里为环境变量名称 keep-history: true on: branch: master local-dir: public push源码 将你的 hexo 项目代码 push 到 GitHub 仓库的 master 分支，Travis CI 检测到 master 分支代码有变动，会自动执行脚本命令，将 hexo 项目编译生成静态页面，部署到 gh-pages 分支。 部署方法，在 Hexo项目根目录右键 Git Bash Here： 1. git init #首次Push 2. git remote add origin https://github.com/Lykisun/xxx.git #首次Push 3. git add . #首次Push，后面可将.改为发生变动的文件 4. git commit -m &quot;init&quot; #引号内为注释内容 5. git push -u origin msater 若命令2报错：git remote add origin https://github.com/Lykisun/xxx.git 则先执行：git remote rm origin 然后再执行：git remote add origin https://github.com/Lykisun/xxx.git 其他报错自行搜索皆有解决方案。 设置 Github Pages在 GitHub 中前往仓库的 setting-&gt;Options，往下修改 GitHub Pages 的部署分支为 gh-pages 然后 Save，即可通过&lt;你的 GitHub 用户名&gt;.github.io 域名访问（这里我已经删除gh-pages分支因此没有显示）： 如果显示404只需要等待一段时间。 进一步参考了几篇文章，失败了好多次，终于成功使用 Travis CI 将 Hexo 博客部署到 GitHub Pages 上。虽然成功了，但这意味着站点文件将会是公开的。虽然并没有什么重要文件，但是还是希望能够把源码放在私密仓库。一开始的时候我就觉得应该有两种思路： 源码推送到User.github.io仓库，hexo g后推送到分支，将分支作为博客仓库； 源码推送到private仓库，hexo cl hexo g hexo d 实现推送到User.github.io 公开仓库。 由于一开始我就已经建立了部署博客的User.github.io 公开仓库，因此在尝试第一种思路的时候我特意去新申请了一个 Github 账号，不同账号使用 SSH 也出现了让我头秃的问题。但是第二种思路并不需要我们改动已经建立好的博客。 第一种思路成功后我就开始尝试第二种。我在搜索后没有发现利用 Travis CI 使用私密仓库跨仓库部署推送的相关文章，好像之前 Travis CI 对于私密仓库是收费的，现在免费但也有次数限制。进行了好几次尝试之后，每次要么编译失败，要么就只是部署到原仓库的分支。于是放弃。 最后我搜索到 使用 GitHub Actions 自动部署博客教程 ，发现 Github 本身就有免费的 CI 功能，于是开始尝试利用 Github Action 开始了第二种思路。 利用 Github Action 自动部署配置 Github Token在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 新建用来存放源码的私密仓库，名称无妨，在仓库的 Setting-&gt;Secrets-&gt;New repositorysecret 添加新Secret，名称随意但是后面需要使用，我这里设置为 ACCESS_TOKEN，内容粘贴入刚才复制的 token ： 不同文章设置不太一样，有的用生成的ssh设置的，有的还要设置博客仓库的Deploy keys的，不过我用那些方法都失败了，只用上述办法才成功。 Push源码同第一节 配置 GitHub Actions在私密仓库的 Action-&gt;New workflow 添加新 Action 文件，这里有很多 Action 模板和别人造好的 Action，后续需要可以进行了解使用，这里我们直接选择 set up a workflow yourself，会在仓库新建 .github/workflows/xxx.yml ，然后填入以下内容： # workflow name name: CI Hexo Blog Deploy LTS # master branch on push, auto run on: push: branches: - master jobs: Deploy-Pages: name: Deploy Hexo Public To Pages runs-on: ubuntu-latest steps: # check it to your workflow can access it # from: https://github.com/actions/checkout - name: Checkout Repository master branch uses: actions/checkout@master # from: https://github.com/actions/setup-node - name: Setup Node.js 12.x uses: actions/setup-node@master with: node-version: &quot;12.x&quot; - name: Setup Git Infomation run: | git config --global user.name &#39;Github用户名&#39; #修改处 git config --global user.email &#39;Github注册邮箱&#39; #修改处 - name: Get Latest Commit Message run: | git log --pretty=format:&quot;%s from Github Actions at `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot; --date=short -n 1 &gt; commit-message.log - name: Setup Hexo Dependencies run: | npm install hexo-cli -g npm install - name: Generate public files run: | hexo clean hexo generate - name: Deploy To Github Pages env: Github_Pages: github.com/Github用户名/Github用户名.github.io #修改处 Github_Token: ${{ secrets.ACCESS_TOKEN }} #修改处 run: | git clone https://${Github_Pages} .github_pages cd .github_pages git checkout master cd ../ mv .github_pages/.git/ ./public/ cd ./public/ git add . git commit -F ../commit-message.log git push --force --quiet &quot;https://${Github_Token}@${Github_Pages}&quot; master:master 注：以上需要更改 Github用户名、Github注册邮箱，以及刚才你设置的 Secret 名称。 有的相关文章中直接使用了别人的 Action ，但是我使用后一直出现 fatal: could not read Username for https://github.com: No such file or directory 的错误，没有找到解决方法，就换了一种方式。 完成后提交到仓库，就会开始自动构建并部署： 在我重新进行部署的时候，新建了 Github用户名.github.io 仓库，然后将源码推送到新建的私密仓库，再建立 Action 后，出现了以下错误： 这是由于Github用户名.github.io 仓库并没有 master 分支的缘故，因此可以 PUSH 一个README文件上去并将其设为 master 分支，或者直接建立的时候勾选 README 选项，当然也可以在仓库建立，我就是直接新建的，不过这样产生的分支名称是 main ，上述 xxx.yml Action文件就要调整 master 为 main： 然后就成功了： 之后就可以看到博客的更新了。今后可以在源码仓库直接修改文件或者本地修改后推送到源码仓库，就会自动构建然后推送到博客仓库，一来备份了源码，二来免去部署步骤。 其他使用自定义域名访问你可以使用自己的域名来访问 GitHub Pages 服务，只需在 hexo 项目的 source 目录下添加 CNANE 文件。 CNANE 文件内容为自定义域名，例如：xxx.xxx.cn，然后在仓库 Settings 开启域名 https 协议。 Project page如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 &lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。你需要检查你的 Hexo 配置文件，将 url 修改为 &lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、将 root 的值修改为 /&lt;repository 的名字&gt;/ 总结尝试下来，当然是 Github Action 更加简单快捷，而且是免费的，功能更加丰富，因此建议使用 Github Action。当然还有其他的CI工具，我就没有试用了。 参考链接 使用 Travis CI 自动部署 Hexo 静态博客 GitHub Pages Deployment 将 Hexo 部署到 GitHub Pages 使用 GitHub Actions 自动部署博客教程 使用 GitHub Actions 实现 Hexo 博客自动部署 Github_Action自动构建Hexo实现Coding和Github双部署 GitHub Actions 入门教程","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"/tags/笔记/"},{"name":"编程","slug":"编程","permalink":"/tags/编程/"}],"keywords":[]}]}