{"meta":{"title":"谢欣欣已经长大","subtitle":null,"description":"我又何必记录呢","author":"长大了的谢星星","url":""},"pages":[{"title":"about","date":"2018-12-12T22:14:36.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T21:32:48.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T23:13:35.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T23:13:48.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T23:13:05.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T21:47:59.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T23:11:06.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T23:14:28.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T23:09:03.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T22:14:16.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T22:53:25.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T23:14:38.000Z","updated":"2021-01-01T19:13:46.071Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"缘何而来","slug":"缘何而来","date":"2020-12-20T01:36:15.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"2020/12/20/缘何而来/","link":"","permalink":"/2020/12/20/缘何而来/","excerpt":"缘何而来 为何建站 为何记录 为何怀念","text":"缘何而来 为何建站 为何记录 为何怀念 我要怀念谢欣欣。","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"/tags/笔记/"},{"name":"生活","slug":"生活","permalink":"/tags/生活/"}],"keywords":[]},{"title":"自动部署 Hexo 静态博客","slug":"CI 部署 Hexo 博客","date":"2020-12-20T01:17:32.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"2020/12/20/CI 部署 Hexo 博客/","link":"","permalink":"/2020/12/20/CI 部署 Hexo 博客/","excerpt":"原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 Github Action 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。","text":"原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 Github Action 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。 利用Travis_CI自动部署 这种方法与前面直接进行部署的方法不同，是从使用 hexo cl &amp; hexo g &amp; hexo d 的前一步开始的。 新建GitHub仓库创建一个用来存储 Hexo 项目源代码和静态页面的 GitHub 仓库，如果你希望你的站点能通过 &lt;GitHub 用户名&gt;.github.io 域名访问， repository 应该直接命名为 &lt;GitHub 用户名&gt;.github.io。 用 master 分支 来存储 hexo 博客项目源代码。 用 gh-pages 分支 存储来编译生成后静态页面。 当 master 分支的源代码（主题文件，文章 md 文件、图片等）有变动时，CI 会自动编译并部署到 gh-pages 分支。 注：使用Travis需要将源码放在&lt;GitHub 用户名&gt;.github.io ，由于前面已经将&lt;GitHub 用户名&gt;.github.io 进行了博客部署，因此要么将仓库删除重建或者移到分支，要么新注册账号。建议直接删除重建，后者还涉及不同 Github 布置 SSH 问题。如果不想麻烦，建议跳到后面 利用Github_Action自动部署。 Travis_CI关联项目仓库在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 使用 GitHub 账号登录 Travis CI 官网，关联你的 hexo 博客项目仓库。在所列出来的仓库里找到你的 hexo 项目仓库，点击 Settings 。增加环境变量，名称随意但是后面需要使用，我在这里设置为GH_TOKEN ，值一栏粘贴入在前面生成的 GitHub Token，最后点击 Add 添加： 添加.travis.yml文件在你的 Hexo 博客项目根文件夹下添加 Travis CI 的配置文件 .travis.yml。 .travis.yml 文件的内容如下： sudo: false language: node_js node_js: - 12 cache: npm branches: only: - master # build master branch only script: - hexo generate deploy: provider: pages skip-cleanup: true github-token: $GH_TOKEN #这里为环境变量名称 keep-history: true on: branch: master local-dir: public push源码将你的 hexo 项目代码 push 到 GitHub 仓库的 master 分支，Travis CI 检测到 master 分支代码有变动，会自动执行脚本命令，将 hexo 项目编译生成静态页面，部署到 gh-pages 分支。 部署方法，在 Hexo项目根目录右键 Git Bash Here： 1. git init #首次Push 2. git remote add origin https://github.com/Lykisun/xxx.git #首次Push 3. git add . #首次Push，后面也可将.改为发生变动的文件 4. git commit -m &quot;init&quot; #引号内为注释内容 5. git push -u origin msater 若命令2报错：git remote add origin https://github.com/Lykisun/xxx.git 则先执行：git remote rm origin 然后再执行：git remote add origin https://github.com/Lykisun/xxx.git 其他报错自行搜索皆有解决方案。 设置Github_Pages在 GitHub 中前往仓库的 setting-&gt;Options，往下修改 GitHub Pages 的部署分支为 gh-pages 然后 Save，即可通过&lt;你的 GitHub 用户名&gt;.github.io 域名访问（这里我已经删除gh-pages分支因此没有显示）： 如果显示404只需要等待一段时间。 进一步参考了几篇文章，失败了好多次，终于成功使用 Travis CI 将 Hexo 博客部署到 GitHub Pages 上，但这也意味着站点文件将会是公开的。虽然并没有什么重要文件，但是还是希望能够把源码放在私密仓库。 一开始的时候我就觉得应该有两种思路： 源码推送到User.github.io公开仓库，hexo g后推送到分支，将分支作为博客仓库； 源码推送到private私密仓库，然后自动构建public文件推送到User.github.io 公开仓库。 由于一开始我就已经建立了部署博客的User.github.io 公开仓库，因此在尝试第一种思路的时候我特意去新申请了一个 Github 账号，不同账号使用 SSH 也出现了让我头秃的问题。但是第二种思路并不需要我们改动已经建立好的博客。 第一种思路成功后我就开始尝试第二种。我在搜索后没有发现利用 Travis CI 使用私密仓库跨仓库部署推送的相关文章，好像之前 Travis CI 对于私密仓库是收费的，现在免费但也有次数限制。进行了好几次尝试之后，每次要么编译失败，要么就只是部署到原仓库的分支，于是放弃。 最后我搜索到 使用 GitHub Actions 自动部署博客教程 ，发现 Github 本身就有免费的 CI 功能，于是开始尝试利用 Github Action 开始了第二种思路。 利用Github_Action自动部署配置Github_Token在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 新建用来存放源码的私密仓库，名称无妨，在仓库的 Setting-&gt;Secrets-&gt;New repositorysecret 添加新Secret，名称随意但是后面需要使用，我这里设置为 ACCESS_TOKEN，内容粘贴入刚才复制的 token ： 不同文章设置不太一样，有的用生成的ssh设置的，有的还要设置博客仓库的Deploy keys的，不过我用那些方法都失败了，只用上述办法才成功。 Push源码同第一节PUSH小节。 配置 GitHub Actions在私密仓库的 Action-&gt;New workflow 添加新 Action 文件，这里有很多 Action 模板和别人造好的 Action，后续需要可以进行了解使用，这里我们直接选择 set up a workflow yourself，会在仓库新建 .github/workflows/xxx.yml ，然后填入以下内容： # workflow name name: CI Hexo Blog Deploy LTS # master branch on push, auto run on: push: branches: - master jobs: Deploy-Pages: name: Deploy Hexo Public To Pages runs-on: ubuntu-latest steps: # check it to your workflow can access it # from: https://github.com/actions/checkout - name: Checkout Repository master branch uses: actions/checkout@master # from: https://github.com/actions/setup-node - name: Setup Node.js 12.x uses: actions/setup-node@master with: node-version: &quot;12.x&quot; - name: Setup Git Infomation run: | git config --global user.name &#39;Github用户名&#39; #修改处 git config --global user.email &#39;Github注册邮箱&#39; #修改处 - name: Get Latest Commit Message run: | git log --pretty=format:&quot;%s from Github Actions at `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot; --date=short -n 1 &gt; commit-message.log - name: Setup Hexo Dependencies run: | npm install hexo-cli -g npm install - name: Generate public files run: | hexo clean hexo generate - name: Deploy To Github Pages env: Github_Pages: github.com/Github用户名/Github用户名.github.io #修改处 Github_Token: ${{ secrets.ACCESS_TOKEN }} #修改处 run: | git clone https://${Github_Pages} .github_pages cd .github_pages git checkout master cd ../ mv .github_pages/.git/ ./public/ cd ./public/ git add . git commit -F ../commit-message.log git push --force --quiet &quot;https://${Github_Token}@${Github_Pages}&quot; master:master 注：以上需要更改 Github用户名、Github注册邮箱，以及刚才你设置的 Secret 名称。 有的相关文章中直接使用了别人的 Action ，但是我使用后一直出现 fatal: could not read Username for https://github.com: No such file or directory 的错误，没有找到解决方法，就换了一种方式。 完成后提交到仓库，就会开始自动构建并部署： 在我重新进行部署的时候，由于我用另一个账号新建了 Github用户名.github.io 仓库，然后将源码推送到新建的私密仓库，再建立 Action 后，出现了以下错误： 这是由于Github用户名.github.io 仓库并没有 master 分支的缘故（如果之前用本地 Hexo d 建立的仓库未删除就不需会有此问题），因此可以 PUSH 一个 README 文件上去并将其设为 master 分支，或者直接建立的时候勾选 README 选项，当然也可以在仓库建立，我就是直接新建的，不过这样产生的分支名称是 main ，上述 xxx.yml Action文件就要调整 master 为 main： 然后就成功了： 之后就可以看到博客的更新了。今后可以在源码仓库直接修改文件或者本地修改后推送到源码仓库，就会自动构建然后推送到博客仓库，一来备份了源码，二来免去部署步骤。 在我更新两篇文章后，Action 出现以下错误： 改了改又后来出现错误： 搜索后发现办法： 其他使用自定义域名访问你可以使用自己的域名来访问 GitHub Pages 服务，只需在 hexo 项目的 source 目录下添加 CNANE 文件。 CNANE 文件内容为自定义域名，例如：xxx.xxx.cn，然后在仓库 Settings 开启域名 https 协议。 Project page如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 &lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。你需要检查你的 Hexo 配置文件，将 url 修改为 &lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、将 root 的值修改为 /&lt;repository 的名字&gt;/ 总结尝试下来，当然是 Github Action 更加简单快捷，而且是免费的，功能更加丰富，因此建议使用 Github Action。当然还有其他的CI工具，我就没有试用了。 参考链接 使用 Travis CI 自动部署 Hexo 静态博客 GitHub Pages Deployment 将 Hexo 部署到 GitHub Pages 使用 GitHub Actions 自动部署博客教程 使用 GitHub Actions 实现 Hexo 博客自动部署 Github_Action自动构建Hexo实现Coding和Github双部署 GitHub Actions 入门教程","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"/tags/笔记/"},{"name":"编程","slug":"编程","permalink":"/tags/编程/"}],"keywords":[]},{"title":"Hexo+Github 搭建博客记录","slug":"Hexo+Github搭建博客记录","date":"2020-12-20T01:17:32.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"2020/12/20/Hexo+Github搭建博客记录/","link":"","permalink":"/2020/12/20/Hexo+Github搭建博客记录/","excerpt":"闲来无事心血来潮想码码代码，于是便想搭建一个博客，起初是想学 Python，于是通过搜索终于看见一篇 Python+Django 搭建博客的挺详细的教程：Django 搭建个人博客，于是兴高采烈地跟着复制码代码，可是到后面我突然意识到，要部署到服务器意味着要购买域名和云服务器，然后进行配置，一来麻烦二来烧钱，不过是玩玩而已，遂放弃。接着我又看到 PHP+WordPress 搭建博客的教程：果核建站教程，相比于之前自己码一堆代码，这个方便很多，但是同样要购买云服务器和域名的。后来我在B站看到 Gitee+Hexo 搭建博客教程：零成本-搭建私人永久博客，才知道可将博客托管到 Gitee 或者 Github 上。于是进而搜索到几篇相对详细的关于 Github+Hexo 搭建免费博客的教程，其参考链接附在文末。","text":"闲来无事心血来潮想码码代码，于是便想搭建一个博客，起初是想学 Python，于是通过搜索终于看见一篇 Python+Django 搭建博客的挺详细的教程：Django 搭建个人博客，于是兴高采烈地跟着复制码代码，可是到后面我突然意识到，要部署到服务器意味着要购买域名和云服务器，然后进行配置，一来麻烦二来烧钱，不过是玩玩而已，遂放弃。接着我又看到 PHP+WordPress 搭建博客的教程：果核建站教程，相比于之前自己码一堆代码，这个方便很多，但是同样要购买云服务器和域名的。后来我在B站看到 Gitee+Hexo 搭建博客教程：零成本-搭建私人永久博客，才知道可将博客托管到 Gitee 或者 Github 上。于是进而搜索到几篇相对详细的关于 Github+Hexo 搭建免费博客的教程，其参考链接附在文末。 博客搭建前期准备本博客在 Window10 环境下搭建。 安装 Git、Node.js 下载并安装 Git、Node.js。除了安装路径，我全部选择默认选项安装。 安装完成后可以运行以下命令行验证是否安装完成：git --versionnode -vnpm -v若出错可尝试检查环境变量路径或重启电脑或重新安装。 安装 Hexo 在随意位置鼠标右键 Git Bash Here 后面提到命令若无特别说明在根目录下 git bash 运行。 输入npm install -g hexo，回车安装 Hexo。 其安装时间较长，若长时间未反应可参考 零基础免费搭建个人博客-hexo+github中关于安装 hexo 部分： npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install -g hexo-cli 安装过程显示 warn ：npm WARN deprecated fsevents@2.1.3: Please update to v 2.2.x，忽略即可： cnpm install hexo --save 若出现错误，根据错误直接百度。 安装完成后查看是否成功：hexo -v 初始化 Hexo 创建文件夹 根据自己情况选择合适位置建立文件夹用以存放相应文件，例：D:\\Blog。 初始化 hexo 在Blog文件下，右键Git Bash Here，输入命令：hexo init，进行初始化。 初始配置 打开根文件夹下的_config.yml文件，进行基础配置。 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站的关键词。支援多个关键词。 author 作者名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezon 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 更多配置参考：官方文档 浏览本地博客 运行以下命令： hexo ghexo s 更多 hexo 命令参考：hexo常用命令笔记 在浏览器输入localhost:4000，可浏览本地博客效果： 按 Ctrl+C 可关闭 server。 博客写作 新增博客 可在 D:\\Blog\\source\\_posts 文件夹下新建 博文标题.md 文件。 也可运行命令行 hexo new &quot;博文标题&quot;，新生成文件开头是一些初始化设置，可以在 \\scaffolds\\posts.md 中修改默认设置: --- title: {{ title }} date: {{ date }} tags: top: --- 同样在 \\scaffolds 文件夹中可以自己建立模板，例如 demo.md，输入命令 hexo new demo &quot;博文标题&quot; 就可以直接使用模板了。 --- title: 示例 date: 2020-12-20 18:10:10 tags: - 标签1 - 标签2 top: 3 #自定义文章排序 --- 正文 注意 _config.yml 中有个 permalink 设置，默认为 permalink: :year/:month/:day/:title/，即存放博客文章的永久链接格式，例如新建了一篇 Hexo+Github搭建博客记录 博文，其将被存放到 Github 仓库的 Lykisun.github.io/2020/12/20/Hexo+Github搭建博客记录/ 目录。 如何让博文列表不显示全部内容：在合适的位置加上 &lt;!--more--&gt; 即可。 博客部署 本博客选择部署到 github 上。 配置 GitHub 仓库 申请 github 账号 new repository 点击右上角你的头像 -&gt; Your repositories -&gt; New 新建仓库。 在 Repository name 一栏填入 {GithubID}.github.io（ {GithubID} 为你的 GitHub ID，与前面的 Owner 一致，例如我的是 Lykisun/Lykisun.github.io ），Description 可不填，然后点击 Create repository 添加新仓库。 配置 _config.yml 在 _config.yml 进行配置 在文件末修改： deploy: type: git repo: https://github.com/Github用户名/Github用户名.github.io.git branch: master 若 hexo d 出现 fatal: unable to access https://github类错误，将 repo 地址改为 SSH 地址：git@githu .com:User/User.github.io.git` 部署到 GitHub 配置 SSH Key 输入命令 ssh-keygen -t rsa -C {email} 来生成 SSH，其中 {email} 为你注册 github 的邮箱账号，直接三次回车即可。完成后用记事本打开 C:\\Users\\用户名\\.ssh\\id_rsa.pub 并复制 ssh key 公钥。回到 GitHub，点击头像 -&gt; Setting -&gt; SSH and GPG keys -&gt; New SSH key， Title 可不填，将复制内容填入 Key 栏，然后点击 Add SSH key。运行命令 ssh -T git@github.com，若出现 Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 表示 SSH 配置成功。 输入命令 npm install hexo-deployer-git --save 安装 deployer 。 部署博客 依次输入命令：hexo cleanhexo ghexo d此过程第一次发布会弹出浏览器页面登陆Github验证并授权，显示 INFO Deploy done: git 即部署完成。打开你的 Github 仓库 https://github.com/Lykisun/Lykisun.github.io/ 可以看见部署文件，打开 Lykisun.github.io 就可以看到你的博客了。 若出现错误 git config --global user.email &quot;you@example.com&quot; git config --global user.name&quot;Your Name&quot;，则按提示依次输入 git config --global user.email &quot;邮箱&quot;，git config --global user.name &quot;Github ID&quot; 并回车即可。若出现其他错误可参考 史上最详细“截图”搭建Hexo博客并部署到Github、hexo部署至Git遇到的坑 相关错误解决办法，或直接搜索。 博客美化主题下载在 Hexo官网Hexo Themes可浏览主题，然后通过 git clone 主题的github地址 themes/{name} （{name}为主题名字，推荐使用最受欢迎的主题 next）命令或者根据主题的 Github 主页说明进行安装获取主题，下载的主题在 Blog\\themes\\ 文件夹中。下载好主题后，打开根目录下的 _config.yml，搜索 theme 将 theme: landscape 修改为 theme: 下载的主题名。 在 hexo 官网，点击图片为打开该主题的 Demo 博客，点击下方蓝色的文字即可打开该主题的 GitHub 主页 主题配置建议先使用配置完备的 next 主题，下载后打开 Blog\\themes\\下载的主题\\_config.yml 主题配置文件进行配置，其配置参数一般可以在其 Github 主页或者直接在 Blog\\themes\\下载的主题\\README.md 查看。例如 Schemes 参数： # Schemes scheme: Muse #scheme: Mist #scheme: Pisces #scheme: Gemini 可以选择不同主题样式，在其 GitHub 主页 可以看到不同样式的 Live Preview 个人博客展示。想阅读中文详细参数设置可参考：hexo博客搭建指北 我在使用next主题时并没有什么问题，但是在更换其他主题，博客页面显示： 搜索后查到： 原因是hexo在5.0之后把 swig 给删除了需要自己手动安装。运行 npm i hexo-renderer-swig 后，过一会就正常了。 博客维护上述方法部署博客，最终源码位于本地，生成文件部署在 Github 上。我们也可以将源码 PUSH 到 Github 上作为备份，当然这样子源码是公开的。 Push 源代码在 Github 新建仓库，在 Blog 文件夹 Git Bash Here。 在2020年10月1起，Github 默认主分支从 master 更名为 main，以往提交方式会默认创建一个 master 分支，执行 git config --global init.defaultBranch main，可将本地 git init 的时候默认分支修改为 main。由于我们之前默认以 master 作为仓库主分支，因此在此不进行更改。 运行以下命令：git initgit add .git commit . -m &quot;initialize&quot; //注释git remote add origin git@github.com:Lykisun/HexoBlog.git //本地仓库和远程github关联git pull --rebase origin master //可选，若仓库存在例如README文件时报错可执行git push -u origin master 进行文件更新时： git add 文件名 git commit . -m &quot;注释&quot; git push -u origin main删除分支： git push origin :分支名称 （注意空格位置） CI 控制原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。 后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。此后只需要将改动 PUSH 到仓库，就会自动进行部署博客。 问题 若 hexo d 出现错误 git config --global user.email &quot;you@example.com&quot; git config --global user.name&quot;Your Name&quot;，则按提示依次输入 git config --global user.email &quot;邮箱&quot;，git config --global user.name &quot;Github ID&quot; 并回车即可。 若 hexo d 出现 fatal: unable to access https://github类错误，将 repo 地址改为 SSH 地址：`git@github.com:User/User.github.io.git`。 若git remote add origin https://github.com/Lykisun/xxx.git 报错：git remote add origin https://github.com/Lykisun/xxx.git， 则执行：git remote rm origin，然后再执行：git remote add origin https://github.com/Lykisun/xxx.git。 参考链接 搭建个人博客-hexo+github详细完整步骤Hexo博客搭建—从入门到精通hexo博客搭建指北史上最详细“截图”搭建Hexo博客并部署到Github小茗同学的博客园Hexo搭建Github静态博客使用GitHub搭建Hexo博客","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"/tags/笔记/"},{"name":"编程","slug":"编程","permalink":"/tags/编程/"}],"keywords":[]},{"title":"Typora + Sharex or PicGo + 阿里云图床","slug":"Typora+ShareXorPicGo+Aliyun","date":"2020-01-01T21:40:32.000Z","updated":"2021-01-01T19:13:46.071Z","comments":true,"path":"2020/01/01/Typora+ShareXorPicGo+Aliyun/","link":"","permalink":"/2020/01/01/Typora+ShareXorPicGo+Aliyun/","excerpt":"Typora+PicGo+阿里云图床 引言：虽然我一直在用 Snipaste，但我主要使用截图后贴图功能，可以很方便进行对比查看，其编辑样式也比较好看。但是 Snipaste 不支持滚动截图，而且编辑样式没有阴影。其实滚动截图倒是不常用，而且 FSCapture 就足够。只是我一直想找一个能截图自带阴影的截图工具。用了 Winsnap，感觉阴影感一般。似乎 Ashampoo Snap 也可以，但没深入使用。Snagit 编辑功能比较强大，就是太笨重。最后选择了 ShareX，不仅可以添加自定义阴影，还有圆角等图像效果，最强的还是有截图上传等众多功能。另外用了一下截图后贴图的 Setuna，不好用。体验了无边框的图片浏览器 Vieas 和 MassiGra，都还不错，不过最后还是回归了 Honeyview。当然还有很多优秀的截图看图工具，在此只是选择了符合自己需求的而已。","text":"Typora+PicGo+阿里云图床 引言：虽然我一直在用 Snipaste，但我主要使用截图后贴图功能，可以很方便进行对比查看，其编辑样式也比较好看。但是 Snipaste 不支持滚动截图，而且编辑样式没有阴影。其实滚动截图倒是不常用，而且 FSCapture 就足够。只是我一直想找一个能截图自带阴影的截图工具。用了 Winsnap，感觉阴影感一般。似乎 Ashampoo Snap 也可以，但没深入使用。Snagit 编辑功能比较强大，就是太笨重。最后选择了 ShareX，不仅可以添加自定义阴影，还有圆角等图像效果，最强的还是有截图上传等众多功能。另外用了一下截图后贴图的 Setuna，不好用。体验了无边框的图片浏览器 Vieas 和 MassiGra，都还不错，不过最后还是回归了 Honeyview。当然还有很多优秀的截图看图工具，在此只是选择了符合自己需求的而已。 其实首先我是在接触 MD 语法，插入图片的时候想这个问题的。因为手机上我使用纯纯写作等支持 MD 语法的 APP 进行记录，考虑很多 APP 对于图片的备份都不太友好，因此选择了阿里云对象储存作为图床，使用咕咚云图作为上传到图床的媒介，可以很方便地上传并生成插入链接并赋值到剪切板。于是在PC端使用Typora+PicGo+阿里云图床的方式，直接拖拽图片进Typora自动上传到阿里云图床。 首先下载PicGo。Typora内有三种配置PicGo的方式，这里我选择PicGo(app)，下载客户端，选择PicGo路径。 再在PicGo上进行阿里云图床配置(阿里云图床设置以及其他图床配置直接搜索即有相关内容)： 详细参数设置参考：阿里云 oss 搭建图床以及使用 PicGO 上传图片到图床。 设置完成后直接将图片拖曳或者粘贴到Typora即可。 Sharex+阿里云图床首先设置截图命名规则。以下是我截图文件命令规则： 根据ossutil本地上传文件、ossutil下载及配置地址 下载并配置好ossutil参数。 选择合适的地方(例如 ossutil 文件夹)新建 bat 文件，内容填写如下： @ECHO OFF ::获取传入参数input赋值给para1,此参数由sharex生成,位于sharex所在文件夹内, ::例:&quot;D:\\Install\\Portable\\ShareX\\ShareX\\Screenshots\\2021-01\\LYKISUN_2021-01-01_1609499598.png&quot; Set para1=%1 ::将input参数的&quot;替换为空,即去除双引号并赋值给p1 set &quot;p1=%para1:&quot;=% ::获取路径最后的图片第55位至倒数第1位,即图片名称赋值给p2 set &quot;p2=%para1:~55,-1%&quot; ::获取截图所在目录赋值给p3 set &quot;p3=%para1:~1,54%&quot; ::运行命令:1.切换至ossutil64所在目录;2.上传阿里云命令;3.将md表达式输出至剪切板;4.退出 ::不同命令用&amp;&amp;连接 cmd /k &quot;cd /d D:\\Install\\ForCode\\ossutil64 &amp;&amp; ossutil64 cp %p1% oss://kisun-pic/ossutil/ &amp;&amp; echo ![%p2%](https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/%p2%) | clip &amp;&amp; exit&quot; 然后打开 sharex 根据下图配置： 然后设置截图后动作： 勾选删除本地文件可以在执行动作后删除本地文件。 最后进行快捷键设置。进行截图后就会运行Bat文件将截图上传到阿里云图床的ossutil文件夹，并将插入md的链接自动输出到剪切板： 当然，如果你第一步使用Typora设置了PicGo，你也可以不必设置ShareX，直接勾选截图后动作里面的复制到剪切板，然后在Typora里面粘贴即可。ShareX还支持相当多的其他上传工具。","categories":[],"tags":[{"name":"截图","slug":"截图","permalink":"/tags/截图/"},{"name":"图床","slug":"图床","permalink":"/tags/图床/"}],"keywords":[]}]}