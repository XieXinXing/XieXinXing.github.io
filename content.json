{"meta":{"title":"谢欣欣已经长大♥","subtitle":null,"description":"春立复冬至，青丝即白雪。","author":"长大了的谢星星★","url":"https://xiexinxing.github.io"},"pages":[{"title":"about","date":"2021-01-01T22:14:36.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"about/index.html","permalink":"https://xiexinxing.github.io/about/index.html","excerpt":"","text":"一个无所事事的人，无聊借以打发时间","keywords":"关于"},{"title":"archives","date":"2021-01-16T21:46:59.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"archives/index.html","permalink":"https://xiexinxing.github.io/archives/index.html","excerpt":"","text":"","keywords":null},{"title":"bangumi","date":"2019-02-10T21:32:48.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"bangumi/index.html","permalink":"https://xiexinxing.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"categories","date":"2021-01-16T21:47:51.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"categories/index.html","permalink":"https://xiexinxing.github.io/categories/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T23:13:35.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"client/index.html","permalink":"https://xiexinxing.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T23:13:48.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"comment/index.html","permalink":"https://xiexinxing.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T23:13:05.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"donate/index.html","permalink":"https://xiexinxing.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T21:47:59.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"lab/index.html","permalink":"https://xiexinxing.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T23:11:06.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"links/index.html","permalink":"https://xiexinxing.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T23:14:28.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"music/index.html","permalink":"https://xiexinxing.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T23:09:03.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"rss/index.html","permalink":"https://xiexinxing.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T22:14:16.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"tags/index.html","permalink":"https://xiexinxing.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T22:53:25.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://xiexinxing.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T23:14:38.000Z","updated":"2021-01-19T08:26:54.616Z","comments":false,"path":"video/index.html","permalink":"https://xiexinxing.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"博客调整记录","slug":"博客调整记录","date":"2021-01-17T01:15:45.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"2021/01/17/博客调整记录/","link":"","permalink":"https://xiexinxing.github.io/2021/01/17/博客调整记录/","excerpt":"博客搭建后进行一些调整的记录。","text":"博客搭建后进行一些调整的记录。 主题更换因为个人能力有限，自行修改主题对我来说还是不如使用别人的主题，毕竟太耗费时间精力。先后尝试了很多主题，包括 Next、Sakura、Butterfly、Yilia、Matery 等等，相对合我口味的有 Spfk、Momery 和 Snark 等等，最终选择相对简洁而且配置也简单的 Snark。 设置参数根据主题仓库配置即可。但是有个问题是更改 theme_color 选项并未生效。 Html添加点击跳转联系方式 直接添加 URL 邮件：mailto:xxx@xxx.com QQ： tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=QQ号&amp;website=www.oicqzone.com TG：tg://resolve?domain=用户名 含链接图片关闭fancybox根据怎么在某些图片上禁用 fancybox？ 由于主题 js 中已有该属性： 因此图片添加超链接后，添加 class=&quot;nofancybox&quot; 属性即可： 目录无法跳转在我不经意间缩小网页比例时发现这个主题是会生成目录的（100%时不显示）： 但是点击目录并没有跳转，参考 Hexo 博客踩坑，进入项目根目录 node_modules\\hexo-toc\\lib\\filter.js 中，把 28 行～31 行修改为： $title.attr(&#39;id&#39;, id); // $title.children(&#39;a&#39;).remove(); // $title.html( &#39;&lt;span id=&quot;&#39; + id + &#39;&quot;&gt;&#39; + $title.html() + &#39;&lt;/span&gt;&#39; ); // $title.removeAttr(&#39;id&#39;); 恢复正常~ 后来发现只在 hexo s 后本地查看才能正常跳转，部署到 Github 后点击目录显示 # null ，无法跳转： 再后来本地中文也无法跳转，只有英文才能跳转，尝试了网上几种解决办法都没解决。再再后来又可以了，再再再后来又发现有的文章可以有的不行，然后发现添加的网易云外链无法播放了。吐了，放弃折腾了。 将所有文章的标题前后的换行都增加至3行，本地浏览正常，部署后仍无效。 最后把 hexo-toc 卸载了，这次好像真的正常了。 部分标题无法渲染发现有篇博文的目录中，四个标题只渲染了三个，在本地 MD 编辑器中是显示正常的： 最后才发现是在此标题之前有一个代码块缺少换行的缘故： 其他尝试添加音乐 使用音乐外链 例如网易云，生成歌曲或者歌单外链后添加即可（歌单生成外链在自己页面看不到）： &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=110 src=&quot;//music.163.com/outchain/player?type=0&amp;id=5471267016&amp;auto=1&amp;height=90&quot;&gt;&lt;/iframe&gt; 效果 (auto=1时自动播放)： 使用 Aplayer 安装 hexo-tag-aplayer 插件：npm install --save hexo-tag-aplayer 使用 MeingJS 使播放器将支持对于 QQ 音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。 在 Hexo 配置文件 _config.yml 中设置： aplayer: meting: true 例如打开网易云音乐「岁月神偷」和歌单「拾遗」的 id分别 为 28285910和 5471267016，按下面格式插入： {% meting \"28285910\" \"netease\" \"song\" \"theme:#555\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %} {% meting \"5471267016\" \"netease\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %} 效果： 更多设置参考： hexo-tag-aplayer，插入视频参考：hexo-tag-dplayer。 修改配色尝试修改 css 样式： 颜色参考网站：NIPPON COLORS - 日本の伝統色、中国色 － 中国传统颜色 底色需要修改snark/source/img/backgroud.png，采用 钢青(#142334)、 鸽蓝（#1c2938）以及加深样式。 Pug与Hexo在 hexo 主题中使用 pug 时，可以通过使用 hexo 提供的全局变量 config，theme 来分别调用博客根目录下 _config.yml 文件中的参数以及主题根目录下 _config.yml 文件中的参数。 //- blog config p= config.description //- theme config p= theme.title 更多查看：网页模板 pug 基本语法","categories":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}]},{"title":"jsDelivr + Github 搭建 CDN 图床","slug":"jsDelivr+Github搭建CDN图床","date":"2021-01-06T20:07:22.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"2021/01/06/jsDelivr+Github搭建CDN图床/","link":"","permalink":"https://xiexinxing.github.io/2021/01/06/jsDelivr+Github搭建CDN图床/","excerpt":"利用 CDN 加速 Github 图床访问。","text":"利用 CDN 加速 Github 图床访问。 引言：在搭建博客的过程中，时常需要插入图片，总是在很多地方提到 CDN 加速服务，于是了解过后尝试引入 CDN 加速。由于文章插入我使用 Typora + 阿里云OSS，而阿里云 CDN 是收费的，因此暂时使用开源免费的 Jsdelivr，并使用其支持的 Github 图床进行搭建。 CDN根据百科： 内容分发网络的总承载量可以比单一骨干最大的带宽还要大。这使得内容分发网络可以承载的用户数量比起传统单一服务器多。也就是说，若把有 100Gbps 处理能力的服务器放在只有 10Gbps 带宽的数据中心，则亦只能发挥出 10Gbps 的承载量。但如果放到十个有 10Gbps 的地点，整个系统的承载量就可以到 10*10Gbps。 同时，将服务器放到不同地点，可以减少互连的流量，进而降低带宽成本。 对于 TCP 传输而言，TCP 的速度（throughput）会受到延迟时间（latency）与数据包漏失率（packet loss）影响。为了改善这些负面因素，内容分发网络通常会指派较近、较顺畅的服务器节点将资料传输给用户。虽然距离并不是绝对因素，但这么做可以尽可能提高性能，用户将会觉得比较顺畅。这使得一些比较高带宽的应用（传输高清视频）更容易推动。 内容分发网络另外一个好处在于有异地备援。当某个服务器故障时，系统将会调用其他邻近地区的服务器服务，进而提供接近 100% 的可靠度。 除此之外，内容分发网络提供给服务提供者更多的控制权。提供服务的人可以针对客户、地区，或是其他因子调整。 可以查看更多关于 CDN 的解释：CDN 是什么？使用 CDN 有什么优势？、维基百科：内容分发网络 PicGo配置Github图床首先创建 Github Public 仓库。 在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 然后下载 PicGo，打开 Github 图床配置如下： 根据 Jsdelivr ： 其中自定义域名设置为： https://cdn.jsdelivr.net/gh/用户名/仓库名/ 更多详情参考：jsdelivr官网","categories":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://xiexinxing.github.io/tags/Github/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"https://xiexinxing.github.io/tags/jsDelivr/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}]},{"title":"Markdown + 阿里云图床","slug":"Markdown+阿里云图床","date":"2021-01-01T21:40:32.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"2021/01/01/Markdown+阿里云图床/","link":"","permalink":"https://xiexinxing.github.io/2021/01/01/Markdown+阿里云图床/","excerpt":"Markdown 文档与多工具使用 AliyunOss 图床。","text":"Markdown 文档与多工具使用 AliyunOss 图床。 引言：虽然我一直在用 Snipaste，但我主要使用截图后贴图功能，可以很方便进行对比查看，其编辑样式也比较好看。但是 Snipaste 不支持滚动截图，而且编辑样式没有阴影。其实滚动截图倒是不常用，而且 FSCapture 就足够。只是我一直想找一个能截图自带阴影的截图工具。用了 Winsnap，感觉阴影感一般。似乎 Ashampoo Snap 也可以，但没深入使用。Snagit 编辑功能比较强大，就是太笨重。最后选择了 ShareX，不仅可以添加自定义阴影，还有圆角等图像效果，最强的还是有截图上传等众多功能。另外用了一下截图后贴图的 Setuna，不好用。体验了无边框的图片浏览器 Vieas 和 MassiGra，都还不错，不过最后还是回归了 Honeyview。当然还有很多优秀的截图看图工具，在此只是选择了符合自己需求的而已。 AliyunOss配置图床注册并登录，在阿里云对象储存OSS页面选择 折扣套餐，如下图购买一年只需要 9 元： 购买完成后回到首页，点击右上方的控制台，进入个人控制台，在左侧找到 对象储存OSS 并点击进入： 选择左侧 Bucket列表 -&gt; 创建Bucket，弹出的 OSS版本控制 是否开通看个人选择，然后进行参数填写。注意 读写权限 一项要选择 公共读，然后点击确定进行创建： 创建成功后鼠标放置在左上角头像上，在弹出的窗口中选择 访问控制: 选择左侧 用户 -&gt; 创建用户，然后填写参数，勾选编程访问： 复制显示的 keyid 和 keySecret ，以下各种配置都需要使用。可以先保存为 TXT 文件，关闭后不再显示，若遗失点击进入用户可以重新创建： 创建用户后选择用户添加权限，勾选 AliyunOSSFullAccess 后点击确定： 创建到此就完成了，可以在 Bucket 创建文件夹放置文件。 注意购买的只是储存空间，还需要购买流入流出的流量，使用频率不高，可以按量计算，只需要充值几块钱即可。 Typora+PicGo+阿里云图床其实首先我是在接触 MD 语法，插入图片的时候想这个问题的。因为手机上我使用纯纯写作等支持 MD 语法的 APP 进行记录，考虑很多 APP 对于图片的备份都不太友好，因此选择了阿里云对象储存作为图床，使用咕咚云图作为上传到图床的媒介，可以很方便地上传并生成插入链接并复制到剪切板。于是在 PC 端使用 Typora + PicGo + 阿里云图床的方式，直接拖拽图片进 Typora 自动上传到阿里云图床。 Typora 内有三种配置 PicGo 的方式，由于我之前已经下载了 PicGo，因此这里我选择 PicGo(app)： 插入图片时选项可以勾选前两个，也可以只勾选第一个。勾选第二个的话，同样的图片，你如果使用第二次，它也会上传覆盖。但是如果是其他地方的网络图片，就可以上传到你自己的图床。 再在 PicGo 上进行阿里云图床配置 (阿里云图床设置以及其他图床配置直接搜索即有相关内容)： 详细参数设置参考：阿里云 oss 搭建图床以及使用 PicGO 上传图片到图床。 设置完成后直接将图片拖曳或者粘贴到 Typora 即可。 也可以选择 PicGo-Core (command line)，其与 PicGo(app) 区别如下： 机翻过来就是： 相比之下还是选择 PicGo-Core (command line) 更好，其配置也很简单，参考 最强 markdown 编辑器 typora 图床教程 - 阿里云版 即可。 写到这里的时候我又重新改成第二种方式了，因为我属实不喜欢 PicGo 一直后台运行。 Sharex+阿里云图床首先设置截图命名规则。以下是我截图文件命令规则： 根据 ossutil 本地上传文件、ossutil 下载及配置地址 下载并配置好 ossutil 参数。 选择合适的地方(例如 ossutil 文件夹)新建 bat 文件，内容填写如下： @ECHO OFF ::获取传入参数input赋值给para1,此参数由sharex生成,位于sharex所在文件夹内, ::例:&quot;D:\\Install\\Portable\\ShareX\\ShareX\\Screenshots\\2021-01\\LYKISUN_2021-01-01_1609499598.png&quot; Set para1=%1 ::将input参数的&quot;替换为空,即去除双引号并赋值给p1 set p1=%para1:&quot;=% ::获取路径最后的图片第55位至倒数第1位,即图片名称赋值给p2。不同路径注意修改 set p2=%para1:~55,-1% ::获取截图所在目录赋值给p3。不同路径注意修改 set p3=%para1:~1,54% ::运行命令:1.切换至ossutil64所在目录;2.上传阿里云命令;3.将md表达式输出至剪切板，注意我的图片是储存在Bucket的ossutil文件夹中;4.退出，隐藏窗口时必须加上才能完成命令。不同命令用&amp;&amp;连接 cmd /k &quot;cd /d D:\\Install\\ForCode\\ossutil64 &amp;&amp; ossutil64 cp %p1% oss://kisun-pic/ossutil/ &amp;&amp; echo ![%p2%](https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/%p2%) | clip &amp;&amp; exit&quot; MarkDown 文档中以 ![]() 方式插入如图片不支持大小和位置修改，但是 MD 支持 Html ，可以使用以下格式控制图片大小和左右居中位置： &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;path&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;name&quot;/&gt;&lt;/div&gt; 因此上述 Bat 文件中最后的命令也可以修改为： @ECHO OFF set para1=%1 set p1=%para1:&quot;=% set p2=%para1:~37,-1% ::由于我修改了图片保存路径，因此这里以及下方改变了参数 set p3=%para1:~1,36% cmd /k &quot;cd /d D:\\Install\\ForCode\\ossutil64 &amp;&amp; ossutil64 cp %p1% oss://kisun-pic/ossutil/ &amp;&amp; exit&quot; set/p=&quot;&lt;div align=center&gt;&lt;img src=&quot;https://kisun-pic.oss-cn-shenzhen.aliyuncs.com/ossutil/%p2%&quot; width=&quot;600&quot; height=&quot;300&quot;&gt;&lt;/div&gt;&quot;&lt;nul | clip 缺点就是图片大小需要自己调整，不然直接需要删除 width 和 height 两个参数，因此无特殊要求的话，用第一种方式就可以了。不过感觉以 Html 方式插入的图片显示更友好。 然后打开 sharex 根据下图配置： 然后设置截图后动作： 勾选删除本地文件可以在执行动作后删除本地文件。 最后进行快捷键设置。进行截图后就会运行 Bat 文件将截图上传到阿里云图床的 ossutil 文件夹，并将插入 md 的链接格式自动输出到剪切板，然后直接在 MD 文件中粘贴即可： 当然，如果你第一步使用 Typora 设置了 PicGo，你也可以不必设置 ShareX，直接勾选截图后动作里面的复制到剪切板，然后直接在 Typora 里面粘贴即可，Typora 会运行 PicGo 自动上传。当然，ShareX 还支持相当多的其他上传工具，体验一下就知道其强大了。自定义上传器设置需要使用阿里云oss API，没有找到相关教程，整不明白，于是放弃。 VSCode+PicGo+阿里云图床使用 VSCode 不用插件就能编辑和预览 MD 文件，也可以安装 Markdown All in One、Markdown Preview Enhanced、Maridown pdf 等插件使用更加 丰富的功能。要使用图床上传图片可以安装 PicGo 插件。 在 VsCode 搜索并安装 PicGo 插件，在插件配置处按如下配置： 其中 Area 和 Custom Url 要根据自己创建 Bucket 时选择的地区修改。 修改 Pic Bed:Current 为 aliyun： 当然喜欢使用 Sublime Text 编辑器的话也能配置 MD 编辑和实时预览，但是预览需要使用浏览器这一点我不太喜欢，因此没有选择我最常用的 ST3 来编辑 MD 文件。 参考链接 阿里云 oss 搭建图床以及使用 PicGO 上传图片到图床 最强 markdown 编辑器 typora 图床教程 - 阿里云版 VSCode+PicGo+AliyunOss 搭建 Markdown 图床 Upload Images 对象存储 OSS 命令行工具 ossutil","categories":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://xiexinxing.github.io/tags/Markdown/"},{"name":"AliyunOSS","slug":"AliyunOSS","permalink":"https://xiexinxing.github.io/tags/AliyunOSS/"},{"name":"Typora","slug":"Typora","permalink":"https://xiexinxing.github.io/tags/Typora/"},{"name":"PicGo","slug":"PicGo","permalink":"https://xiexinxing.github.io/tags/PicGo/"},{"name":"ShareX","slug":"ShareX","permalink":"https://xiexinxing.github.io/tags/ShareX/"},{"name":"VSCode","slug":"VSCode","permalink":"https://xiexinxing.github.io/tags/VSCode/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}]},{"title":"CI 部署 Hexo 静态博客","slug":"CI部署Hexo博客","date":"2020-12-20T01:17:32.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"2020/12/20/CI部署Hexo博客/","link":"","permalink":"https://xiexinxing.github.io/2020/12/20/CI部署Hexo博客/","excerpt":"使用 GithubAction 自动部署 Hexo 静态博客。","text":"使用 GithubAction 自动部署 Hexo 静态博客。 引言：原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。再后来了解到 Github Action 本身就具有免费的 CI 功能，于是实现将源码 PUSH 到私密仓库，再自动推送到博客文件所在仓库。 利用Travis_CI自动部署 CI，即持续集成 (Continuous Integration)，是在源代码变更后自动检测、拉取、构建和进行单元测试的过程。这种方法与前面直接进行部署的方法不同，是从使用 hexo cl &amp; hexo g &amp; hexo d 的前一步开始的。 新建GitHub仓库创建一个用来存储 Hexo 项目源代码和静态页面的 GitHub 仓库，如果你希望你的站点能通过 &lt;GitHub 用户名&gt;.github.io 域名访问， repository 应该直接命名为 &lt;GitHub 用户名&gt;.github.io。 用 master 分支 来存储 hexo 博客项目源代码。 用 gh-pages 分支 存储来编译生成后静态页面。 当 master 分支的源代码（主题文件，文章 md 文件、图片等）有变动时，CI 会自动编译并部署到 gh-pages 分支。 注：使用Travis需要将源码放在&lt;GitHub 用户名&gt;.github.io ，由于前面已经将&lt;GitHub 用户名&gt;.github.io 进行了博客部署，因此要么将仓库删除重建或者移到分支，要么新注册账号。建议直接删除重建，后者还涉及不同 Github 布置 SSH 问题。如果不想麻烦，建议跳到后面 利用Github_Action自动部署。 Travis_CI关联项目仓库在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 使用 GitHub 账号登录 Travis CI 官网，关联你的 hexo 博客项目仓库。在所列出来的仓库里找到你的 hexo 项目仓库，点击 Settings 。增加环境变量，名称随意但是后面需要使用，我在这里设置为GH_TOKEN ，值一栏粘贴入在前面生成的 GitHub Token，最后点击 Add 添加： 添加.travis.yml文件在你的 Hexo 博客项目根文件夹下添加 Travis CI 的配置文件 .travis.yml。 .travis.yml 文件的内容如下： sudo: false language: node_js node_js: - 12 cache: npm branches: only: - master # build master branch only script: - hexo generate deploy: provider: pages skip-cleanup: true github-token: $GH_TOKEN #这里为环境变量名称 keep-history: true on: branch: master local-dir: public push到github将你的 hexo 项目代码 push 到 GitHub 仓库的 master 分支，Travis CI 检测到 master 分支代码有变动，会自动执行脚本命令，将 hexo 项目编译生成静态页面，部署到 gh-pages 分支。 部署方法，在 Hexo项目根目录右键 Git Bash Here： 1. git init #首次Push 2. git remote add origin https://github.com/Lykisun/xxx.git #首次Push 3. git add . #首次Push，后面也可将.改为发生变动的文件 4. git commit -m &quot;init&quot; #引号内为注释内容 5. git push -u origin msater 若命令2报错：git remote add origin https://github.com/Lykisun/xxx.git 则先执行：git remote rm origin 然后再执行：git remote add origin https://github.com/Lykisun/xxx.git 其他报错自行搜索皆有解决方案。 设置Github_Pages在 GitHub 中前往仓库的 setting-&gt;Options，往下修改 GitHub Pages 的部署分支为 gh-pages 然后 Save，即可通过&lt;你的 GitHub 用户名&gt;.github.io 域名访问（这里我已经删除gh-pages分支因此没有显示）： 如果显示404只需要等待一段时间。 进一步参考了几篇文章，失败了好多次，终于成功使用 Travis CI 将 Hexo 博客部署到 GitHub Pages 上，但这也意味着站点文件将会是公开的。虽然并没有什么重要文件，但是还是希望能够把源码放在私密仓库。 一开始的时候我就觉得应该有两种思路： 源码推送到User.github.io公开仓库，hexo g后推送到分支，将分支作为博客仓库； 源码推送到private私密仓库，然后自动构建public文件推送到User.github.io 公开仓库。 由于一开始我就已经建立了部署博客的User.github.io 公开仓库，因此在尝试第一种思路的时候我特意去新申请了一个 Github 账号，不同账号使用 SSH 也出现了让我头秃的问题。但是第二种思路并不需要我们改动已经建立好的博客。 第一种思路成功后我就开始尝试第二种。我在搜索后没有发现利用 Travis CI 使用私密仓库跨仓库部署推送的相关文章，好像之前 Travis CI 对于私密仓库是收费的，现在免费但也有次数限制。进行了好几次尝试之后，每次要么编译失败，要么就只是部署到原仓库的分支，于是放弃。 最后我搜索到 使用 GitHub Actions 自动部署博客教程 ，发现 Github 本身就有免费的 CI 功能，于是开始尝试利用 Github Action 开始了第二种思路。 利用Github_Action自动部署配置Github_Token在用户头像处点击 Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token 创建 github 访问令牌 ，名称随意，勾选 repo 选项，然后复制密匙： 新建用来存放源码的私密仓库，名称无妨，在仓库的 Setting-&gt;Secrets-&gt;New repositorysecret 添加新Secret，名称随意但是后面需要使用，我这里设置为 ACCESS_TOKEN，内容粘贴入刚才复制的 token ： 不同文章设置不太一样，有的用生成的ssh设置的，有的还要设置博客仓库的Deploy keys的，不过我用那些方法都失败了，只用上述办法才成功。 Push源码同第一节 PUSH源码 小节。 配置 GitHub Actions在私密仓库的 Action-&gt;New workflow 添加新 Action 文件，这里有很多 Action 模板和别人造好的 Action，后续需要可以进行了解使用，这里我们直接选择 set up a workflow yourself，会在仓库新建 .github/workflows/xxx.yml ，然后填入以下内容： # workflow name name: CI Hexo Blog Deploy LTS # master branch on push, auto run on: push: branches: - master jobs: Deploy-Pages: name: Deploy Hexo Public To Pages runs-on: ubuntu-latest steps: # check it to your workflow can access it # from: https://github.com/actions/checkout - name: Checkout Repository master branch uses: actions/checkout@master # from: https://github.com/actions/setup-node - name: Setup Node.js 12.x uses: actions/setup-node@master with: node-version: &quot;12.x&quot; - name: Setup Git Infomation run: | git config --global user.name &#39;Github用户名&#39; #修改处 git config --global user.email &#39;Github注册邮箱&#39; #修改处 - name: Get Latest Commit Message run: | git log --pretty=format:&quot;%s from Github Actions at `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot; --date=short -n 1 &gt; commit-message.log - name: Setup Hexo Dependencies run: | npm install hexo-cli -g npm install - name: Generate public files run: | hexo clean hexo generate - name: Deploy To Github Pages env: Github_Pages: github.com/Github用户名/Github用户名.github.io #修改处 Github_Token: ${{ secrets.ACCESS_TOKEN }} #修改处 run: | git clone https://${Github_Pages} .github_pages cd .github_pages git checkout master cd ../ mv .github_pages/.git/ ./public/ cd ./public/ git add . git commit -F ../commit-message.log git push --force --quiet &quot;https://${Github_Token}@${Github_Pages}&quot; master:master 注：以上需要更改 Github用户名、Github注册邮箱，以及刚才你设置的 Secret 名称。 有的相关文章中直接使用了别人的 Action ，但是我使用后一直出现 fatal: could not read Username for https://github.com: No such file or directory 的错误，没有找到解决方法，就换了一种方式。 完成后提交到仓库，就会开始自动构建并部署： 在我重新进行部署的时候，由于我用另一个账号新建了 Github用户名.github.io 仓库，然后将源码推送到新建的私密仓库，再建立 Action 后，出现了以下错误： 这是由于Github用户名.github.io 仓库并没有 master 分支的缘故（如果之前用本地 Hexo d 建立的仓库未删除就不需会有此问题），因此可以 PUSH 一个 README 文件上去并将其设为 master 分支，或者直接建立的时候勾选 README 选项，当然也可以在仓库建立，我就是直接新建的，不过这样产生的分支名称是 main ，上述 xxx.yml Action文件就要调整 master 为 main： 然后就成功了： 之后就可以看到博客的更新了。今后可以在源码仓库直接修改文件或者本地修改后推送到源码仓库，就会自动构建然后推送到博客仓库，一来备份了源码，二来免去部署步骤。 在我更新两篇文章后，Action 出现以下错误： 改了改又后来出现错误： 搜索后发现原因和办法： 其他使用自定义域名访问你可以使用自己的域名来访问 GitHub Pages 服务，只需在 hexo 项目的 source 目录下添加 CNANE 文件。 CNANE 文件内容为自定义域名，例如：xxx.xxx.cn，然后在仓库 Settings 开启域名 https 协议。 Project page如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 &lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。你需要检查你的 Hexo 配置文件，将 url 修改为 &lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、将 root 的值修改为 /&lt;repository 的名字&gt;/ 总结尝试下来，当然是 Github Action 更加简单快捷，而且是免费的，功能更加丰富，因此建议使用 Github Action。当然还有其他的CI工具，我就没有试用了。 同样，我们还是可以先使用hexo g 以及 hexo s 然后通过 http://localhost:4000/ 先查看效果然后进行博客部署。 参考链接 使用 Travis CI 自动部署 Hexo 静态博客 GitHub Pages Deployment 将 Hexo 部署到 GitHub Pages 使用 GitHub Actions 自动部署博客教程 使用 GitHub Actions 实现 Hexo 博客自动部署 Github_Action自动构建Hexo实现Coding和Github双部署 GitHub Actions 入门教程","categories":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://xiexinxing.github.io/tags/Hexo/"},{"name":"Travis CI","slug":"Travis-CI","permalink":"https://xiexinxing.github.io/tags/Travis-CI/"},{"name":"Github Action","slug":"Github-Action","permalink":"https://xiexinxing.github.io/tags/Github-Action/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}]},{"title":"Hexo + Github 搭建博客记录","slug":"Hexo+Github搭建博客","date":"2020-12-20T01:17:32.000Z","updated":"2021-01-19T08:26:54.616Z","comments":true,"path":"2020/12/20/Hexo+Github搭建博客/","link":"","permalink":"https://xiexinxing.github.io/2020/12/20/Hexo+Github搭建博客/","excerpt":"部署在 Github 的 Hexo 博客搭建过程记录。","text":"部署在 Github 的 Hexo 博客搭建过程记录。 引言：闲来无事心血来潮想码码代码，于是便想搭建一个博客，起初是想学 Python，于是通过搜索终于看见一篇 Python+Django 搭建博客的挺详细的教程：Django 搭建个人博客，于是兴高采烈地跟着复制码代码，可是到后面我突然意识到，要部署到服务器意味着要购买域名和云服务器，然后进行配置，一来麻烦二来烧钱，不过是玩玩而已，遂放弃。接着我又看到 PHP+WordPress 搭建博客的教程：果核建站教程，相比于之前自己码一堆代码，这个方便很多，但是同样要购买云服务器和域名的。后来我在B站看到 Gitee+Hexo 搭建博客教程：零成本-搭建私人永久博客，才知道可将博客托管到 Gitee 或者 Github 上。于是进而搜索到几篇相对详细的关于 Github+Hexo 搭建免费博客的教程，其参考链接附在文末。 博客搭建前期准备本博客在 Window10 环境下搭建。 安装 Git、Node.js 下载并安装 Git、Node.js。除了安装路径，我全部选择默认选项安装。 安装完成后可以运行以下命令行验证是否安装完成：git --versionnode -vnpm -v若出错可尝试检查环境变量路径或重启电脑或重新安装。 安装 Hexo 在随意位置鼠标右键 Git Bash Here 后面提到命令若无特别说明在根目录下 git bash 运行。 输入npm install -g hexo，回车安装 Hexo。 其安装时间较长，若长时间未反应可参考 零基础免费搭建个人博客-hexo+github中关于安装 hexo 部分： npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install -g hexo-cli 安装过程显示 warn ：npm WARN deprecated fsevents@2.1.3: Please update to v 2.2.x，忽略即可： cnpm install hexo --save 若出现错误，根据错误直接百度。 安装完成后查看是否成功：hexo -v 初始化 Hexo 创建文件夹 根据自己情况选择合适位置建立文件夹用以存放相应文件，例：D:\\Blog。 初始化 hexo 在Blog文件下，右键Git Bash Here，输入命令：hexo init，进行初始化。 初始配置 打开根文件夹下的_config.yml文件，进行基础配置。 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站的关键词。支援多个关键词。 author 作者名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezon 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 更多配置参考：官方文档 浏览本地博客 运行以下命令： hexo ghexo s 更多 hexo 命令参考：hexo常用命令笔记 在浏览器输入localhost:4000，可浏览本地博客效果： 按 Ctrl+C 可关闭 server。 博客写作 新增博客 可在 D:\\Blog\\source\\_posts 文件夹下新建 博文标题.md 文件。 也可运行命令行 hexo new &quot;博文标题&quot;，新生成文件开头是一些初始化设置，可以在 \\scaffolds\\posts.md 中修改默认设置: --- title: {{ title }} date: {{ date }} tags: top: --- 同样在 \\scaffolds 文件夹中可以自己建立模板，例如 demo.md，输入命令 hexo new demo &quot;博文标题&quot; 就可以直接使用模板了。 --- title: 示例 date: 2020-12-20 18:10:10 tags: - 标签1 - 标签2 top: 3 #自定义文章排序 --- 正文 注意: _config.yml 中有个 permalink 设置，默认为 permalink: :year/:month/:day/:title/，即存放博客文章的永久链接格式，例如新建了一篇 Hexo+Github搭建博客记录 博文，其将被存放到 Github 仓库的 Lykisun.github.io/2020/12/20/Hexo+Github搭建博客记录/ 目录。 如何让博文列表不显示全部内容：在合适的位置加上 &lt;!--more--&gt; 即可。 博客部署 本博客选择部署到 github 上。 配置 GitHub 仓库 申请 github 账号 new repository 点击右上角你的头像 -&gt; Your repositories -&gt; New 新建仓库。 在 Repository name 一栏填入 {GithubID}.github.io（ {GithubID} 为你的 GitHub ID，与前面的 Owner 一致，例如我的是 Lykisun/Lykisun.github.io ），Description 可不填，然后点击 Create repository 添加新仓库。 配置 _config.yml 在 _config.yml 进行配置 在文件末修改： deploy: type: git repo: https://github.com/Github用户名/Github用户名.github.io.git branch: master 若 hexo d 出现 fatal: unable to access https://github类错误，将 repo 地址改为 SSH 地址：git@githu .com:User/User.github.io.git` 部署到 GitHub 配置 SSH Key 输入命令 ssh-keygen -t rsa -C {email} 来生成 SSH，其中 {email} 为你注册 github 的邮箱账号，直接三次回车即可。完成后用记事本打开 C:\\Users\\用户名\\.ssh\\id_rsa.pub 并复制 ssh key 公钥。回到 GitHub，点击头像 -&gt; Setting -&gt; SSH and GPG keys -&gt; New SSH key， Title 可不填，将复制内容填入 Key 栏，然后点击 Add SSH key。运行命令 ssh -T git@github.com，若出现 Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 表示 SSH 配置成功。 输入命令 npm install hexo-deployer-git --save 安装 deployer 。 部署博客 依次输入命令：hexo cleanhexo ghexo d此过程第一次发布会弹出浏览器页面登陆Github验证并授权，显示 INFO Deploy done: git 即部署完成。打开你的 Github 仓库 https://github.com/Lykisun/Lykisun.github.io/ 可以看见部署文件，打开 Lykisun.github.io 就可以看到你的博客了。 若出现错误 git config --global user.email &quot;you@example.com&quot; git config --global user.name&quot;Your Name&quot;，则按提示依次输入 git config --global user.email &quot;邮箱&quot;，git config --global user.name &quot;Github ID&quot; 并回车即可。若出现其他错误可参考 史上最详细“截图”搭建Hexo博客并部署到Github、hexo部署至Git遇到的坑 相关错误解决办法，或直接搜索。 博客美化主题下载在 Hexo官网Hexo Themes可浏览主题，然后通过 git clone 主题的github地址 themes/{name} （{name}为主题名字，推荐使用最受欢迎的主题 next）命令或者根据主题的 Github 主页说明进行安装获取主题，下载的主题在 Blog\\themes\\ 文件夹中。下载好主题后，打开根目录下的 _config.yml，搜索 theme 将 theme: landscape 修改为 theme: 下载的主题名。 在 hexo 官网，点击图片为打开该主题的 Demo 博客，点击下方蓝色的文字即可打开该主题的 GitHub 主页 主题配置建议先使用配置完备的 next 主题，下载后打开 Blog\\themes\\下载的主题\\_config.yml 主题配置文件进行配置，其配置参数一般可以在其 Github 主页或者直接在 Blog\\themes\\下载的主题\\README.md 查看。例如 Schemes 参数： # Schemes scheme: Muse #scheme: Mist #scheme: Pisces #scheme: Gemini 可以选择不同主题样式，在其 GitHub 主页 可以看到不同样式的 Live Preview 个人博客展示。想阅读中文详细参数设置可参考：hexo博客搭建指北 我在使用next主题时并没有什么问题，但是在更换其他主题，博客页面显示： 搜索后查到： 原因是hexo在5.0之后把 swig 给删除了需要自己手动安装。运行 npm i hexo-renderer-swig 后，过一会就正常了。 博客维护上述方法部署博客，最终源码位于本地，生成文件部署在 Github 上。我们也可以将源码 PUSH 到 Github 上作为备份，当然这样子源码是公开的。 Push 源代码在 Github 新建仓库，在 Blog 文件夹 Git Bash Here。 在2020年10月1起，Github 默认主分支从 master 更名为 main，以往提交方式会默认创建一个 master 分支，执行 git config --global init.defaultBranch main，可将本地 git init 的时候默认分支修改为 main。由于我们之前默认以 master 作为仓库主分支，因此在此不进行更改。 运行以下命令：git initgit add .git commit . -m &quot;initialize&quot; //注释git remote add origin git@github.com:Lykisun/HexoBlog.git //本地仓库和远程github关联git pull --rebase origin master //可选，若仓库存在例如README文件时报错可执行git push -u origin master 进行文件更新时： git add 文件名 git commit . -m &quot;注释&quot; git push -u origin main删除分支： git push origin :分支名称 （注意空格位置） CI 控制原本根据 Hexo的版本控制与持续集成，想要使用 AppVeyor 来建立 CI，但是 AppVeyor 一直注册失败，加上根据评论看出会有不少问题，于是放弃该方案。 后来根据 将 Hexo 部署到 GitHub Pages，成功利用 Travis CI 将源码备份到 Github 仓库，并实现自动编译部署到分支。此后只需要将改动 PUSH 到仓库，就会自动进行部署博客。 问题 若 hexo d 出现错误 git config --global user.email &quot;you@example.com&quot; git config --global user.name&quot;Your Name&quot;，则按提示依次输入 git config --global user.email &quot;邮箱&quot;，git config --global user.name &quot;Github ID&quot; 并回车即可。 若 hexo d 出现 fatal: unable to access https://github类错误，将 repo 地址改为 SSH 地址：`git@github.com:User/User.github.io.git`。 若git remote add origin https://github.com/Lykisun/xxx.git 报错：git remote add origin https://github.com/Lykisun/xxx.git， 则执行：git remote rm origin，然后再执行：git remote add origin https://github.com/Lykisun/xxx.git。 参考链接 搭建个人博客-hexo+github详细完整步骤Hexo博客搭建—从入门到精通hexo博客搭建指北史上最详细“截图”搭建Hexo博客并部署到Github小茗同学的博客园Hexo搭建Github静态博客使用GitHub搭建Hexo博客","categories":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://xiexinxing.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://xiexinxing.github.io/tags/Github/"},{"name":"Blog","slug":"Blog","permalink":"https://xiexinxing.github.io/tags/Blog/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiexinxing.github.io/categories/技术/"}]}]}